<?xml version="1.0" encoding="utf-8"?>
<!-- BINGIE -->
<includes>
    <!-- includes -->
    <!-- Fixed Focus Navigation -->
    <include name="Fixed_Focus_Navigation">
        <animation effect="slide" end="0,-310" time="300" condition="Control.IsVisible(1508) + Integer.IsGreater(Container(77777).Position,0)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,2)">Conditional</animation>
<!-- Highlight Slide Animation 3rd Widget -->
		<animation effect="slide" end="0,-754" time="300" condition="Skin.HasSetting(EnableHighlightWidget) + Integer.IsGreater(Container(77777).Position,4)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="!Skin.HasSetting(EnableHighlightWidget) + Integer.IsGreater(Container(77777).Position,4)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,6)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,8)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,10)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,12)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,14)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,16)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,18)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,20)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,22)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,24)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,26)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,28)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,30)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,32)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,34)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,36)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,38)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,40)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,42)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,44)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,46)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,48)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,50)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,52)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,54)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,56)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,58)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,60)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,62)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,64)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,66)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,68)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,70)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,72)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,74)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,76)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,78)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,80)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,82)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,84)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,86)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,88)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,90)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,92)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,94)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,96)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,98)">Conditional</animation>
        <animation effect="slide" end="0,$PARAM[FixedAnimationHeight]" time="300" condition="Integer.IsGreater(Container(77777).Position,100)">Conditional</animation>

        <animation effect="fade" start="100" end="0" time="250" condition="Integer.IsGreater(Window(Home).Property(CurrentWidgetID), $PARAM[widgetid])">Conditional</animation>
        <animation effect="fade" start="0" end="100" delay="300" time="300" reversible="false" condition="Integer.IsGreater(Container(77777).NumItems,2) + String.IsEqual(Window(Home).Property(PrevWidgetPos),1) + String.IsEqual(Window(Home).Property(CurrentWidgetPos),Container(77777).NumItems)">Conditional</animation>
        <animation effect="fade" start="0" end="100" delay="300" time="300" reversible="false" condition="Integer.IsGreater(Container(77777).NumItems,2) + String.IsEqual(Window(Home).Property(PrevWidgetPos),Container(77777).NumItems) + String.IsEqual(Window(Home).Property(CurrentWidgetPos),1)">Conditional</animation>
<!-- up/down animation -->
        <!-- <animation effect="fade" start="100" end="0" time="250" condition="Integer.IsGreater(Window(Home).Property(CurrentWidgetPos), Window(Home).Property(PrevWidgetPos))
         + Integer.IsGreater(Window(Home).Property(CurrentWidgetID), $PARAM[widgetid])">Conditional</animation>
        <animation effect="fade" start="100" end="0" time="250" condition="Integer.IsGreater(Window(Home).Property(PrevWidgetPos), Window(Home).Property(CurrentWidgetPos))
         + Integer.IsGreater($PARAM[widgetid], Window(Home).Property(CurrentWidgetID))">Conditional</animation> -->
<!-- first-to-last / last-to-first -->
        <!-- <animation effect="fade" start="0" end="100" delay="300" time="300" reversible="false" condition="String.IsEqual(Window(Home).Property(PrevWidgetPos),1) + String.IsEqual(Container(77777).CurrentItem,Container(77777).NumItems)">Conditional</animation>
        <animation effect="fade" start="0" end="100" delay="300" time="300" reversible="false" condition="String.IsEqual(Window(Home).Property(PrevWidgetPos),Container(77777).NumItems) + String.IsEqual(Container(77777).CurrentItem,1)">Conditional</animation> -->
    </include>

    <include name="SetFixedVerticalNavigationProps">
        <!-- <onfocus condition="!String.IsEqual(Window(Home).Property(CurrentWidgetID),$PARAM[widgetid])">SetProperty(PrevWidgetID,$INFO[Window(Home).Property(CurrentWidgetID)],Home)</onfocus> -->
        <onfocus condition="!String.IsEqual(Window(Home).Property(CurrentWidgetID),$PARAM[widgetid])">SetProperty(PrevWidgetPos,$INFO[Window(Home).Property(CurrentWidgetPos)],Home)</onfocus>
        <onfocus>SetProperty(CurrentWidgetID,$PARAM[widgetid],Home)</onfocus>
        <onfocus condition="!String.IsEqual(Window(Home).Property(CurrentWidgetID),$PARAM[widgetid])">SetProperty(CurrentWidgetPos,$INFO[Container(77777).CurrentItem],Home)</onfocus>
    </include>

    <!-- Fixed Focus Navigation Factory -->
    <include name="Fixed_Focus_Navigation_Factory">
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),landscape) | Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-250"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),landscapelarge) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-300"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),poster) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-380"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),landscapesmall) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-188"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),singlebox) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-380"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),widebox) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-305"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),smallposter) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-293"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),square) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-303"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),minisquare) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-171"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),landscapedetails) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-250"/>
        </include>
        <include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),posterdetails) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-420"/>
        </include>
<!-- Highlight Fixed Focus -->
		<include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),highlight)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-754"/>
        </include>
        
		<include content="Fixed_Focus_Navigation" condition="String.IsEqual(Skin.String(widgetstyle),banner) + !Window.IsActive(1116)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="FixedAnimationHeight" value="-166"/>
        </include>
    </include>

    <include name="ContainerShowInfoOnclick">
        <onclick condition="String.IsEqual(Container($PARAM[widgetid]).ListItem.DBType,movie) | String.IsEqual(Container($PARAM[widgetid]).ListItem.DBType,tvshow) | String.IsEqual(Container($PARAM[widgetid]).ListItem.DBType,episode) | !String.IsEmpty(Container($PARAM[widgetid]).ListItem.AddonName)">Action(info)</onclick>
    </include>

    <include name="CustomBingieWinProps">
        <onload>ClearProperty(ShowViewSubMenu,Home)</onload>
        <onload>SetProperty(bingieviews,1,Home)</onload>
        <onunload>ClearProperty(ShowViewSubMenu,Home)</onunload>
        <onunload condition="!String.IsEqual(Skin.String(HomeLayout),bingie)">ClearProperty(bingieviews,Home)</onunload>
        <onunload condition="System.HasAlarm(preview_delay)">CancelAlarm(preview_delay,silent)</onunload>
        <onunload>ClearProperty(SkinHelper.WidgetContainer)</onunload>
    </include>

    <!-- DETAILS ROW INCLUDES -->
    <!-- New Tag -->
    <include name="New_Tag_Details_Row">
        <control type="label" id="6110">
            <visible>!String.IsEmpty(Control.GetLabel(6110))</visible>
            <posy>5</posy>
            <height>35</height>
            <width>auto</width>
            <aligny>center</aligny>
            <font>Bold26</font>                                 <!-- Reg22 -->
            <textcolor>springgreen</textcolor>
            <label>$VAR[NewItem]</label>
            <include>Default_Visible_Fade</include>
        </control>
    </include>

    <!-- Thumbs Up/Down -->
    <include name="Thumbs_Up_Down_Details_Row">
        <control type="group" id="6111">
            <visible>Control.IsVisible(61111) | Control.IsVisible(61112)</visible>
            <include>Default_Visible_Fade</include>
            <width>25</width>
            <height>30</height>
            <!-- Thumbs Up -->
            <control type="image" id="61111">
                <include>ThumbsUpMinCondition</include>
                <posy>5</posy>
                <width>25</width>
                <height>30</height>
                <aspectratio align="left" aligny="center">keep</aspectratio>
                <colordiffuse>$INFO[Skin.String(BingiePrimaryTextColor)]</colordiffuse>
                <texture>dialogs/videoinfo/info/thumbs-up.png</texture>
            </control>
            <!-- Thumbs Down -->
            <control type="image" id="61112">
                <include>ThumbsDownMaxCondition</include>
                <posy>10</posy>
                <width>25</width>
                <height>30</height>
                <aspectratio align="left" aligny="center">keep</aspectratio>
                <colordiffuse>$INFO[Skin.String(BingiePrimaryTextColor)]</colordiffuse>
                <texture flipy="true">dialogs/videoinfo/info/thumbs-up.png</texture>
            </control>
        </control>
    </include>

    <!-- Stars rating -->
    <include name="Stars_Rating_Details_Row">
        <control type="image" id="6112">
            <visible>!String.IsEmpty(Control.GetLabel(6112)) + !Control.IsVisible(6111)</visible>
            <posy>5</posy>
            <width>160</width>
            <height>35</height>
            <aspectratio align="left" aligny="center">keep</aspectratio>
            <colordiffuse>$INFO[Skin.String(BingieRatingInDetailsColor)]</colordiffuse>
            <texture>$VAR[rating_value_texture]</texture>
            <include>Default_Visible_Fade</include>
        </control>
    </include>

    <!-- Percentage Based Rating -->
    <include name="Percentage_Rating_Details_Row">
        <control type="label" id="6113">
            <visible>!String.IsEmpty(Control.GetLabel(6113)) + !Control.IsVisible(6111)</visible>
            <posy>5</posy>
            <height>35</height>
            <width>auto</width>
            <aligny>center</aligny>
            <font>Bold26</font>
            <textcolor>springgreen</textcolor>
            <label>$VAR[RatingDecimalToPercentage,,% $LOCALIZE[31857]]</label>
            <include>Default_Visible_Fade</include>
        </control>
    </include>

    <!-- Year / Premiered / PVR Time -->
    <include name="Year_Premiered_PVRTime_Details_Row">
        <control type="label" id="6114">
            <visible>!String.IsEmpty(Control.GetLabel(6114))</visible>
            <posy>5</posy>
            <height>35</height>
            <width>auto</width>
            <aligny>center</aligny>
            <font>Reg26</font>
            <textcolor>$INFO[Skin.String(BingiePrimaryTextColor)]</textcolor>
            <label>$VAR[YearOrPremieredOrPVR]</label>
            <include>Default_Visible_Fade</include>
        </control>
    </include>

<!-- MPAA -->
    <include name="MPAA_Details_Row">
        <control type="group">
            <visible>!String.IsEmpty(Control.GetLabel(6115))</visible>
            <top>5</top>
			<width>95</width>
            <height>36</height>
            <include>Default_Visible_Fade</include>
            <control type="image">
                <height>100%</height>
                <width>100%</width>
                <texture colordiffuse="$INFO[Skin.String(BingieDetailsFlagColor)]">bingie/flags/square-rounded.png</texture>
            </control>
<!-- MPAA Text Rated Color-->
			<control type="label" id="6115">
                <top>-1</top>
				<height>100%</height>
                <width>100%</width>
                <font>Bold24</font>
                <textcolor>$INFO[Skin.String(BingiePrimaryTextColor)]</textcolor>
                <align>center</align>
                <aligny>center</aligny>
                <scroll>true</scroll>
                <label>$VAR[GetMPAA]</label>
            </control>
        </control>
    </include>

<!-- Home Seasons Top Screen / Total Seasons/Episodes  -->
    <include name="Duration_TotalSeasonsEpisodes_Details_Row">
        <control type="label" id="6116">
            <posy>5</posy>
            <visible>!String.IsEmpty(Control.GetLabel(6116))</visible>
            <width>auto</width>
            <label>$VAR[DurationOrTotalSECount]</label>
            <height>35</height>
            <aligny>center</aligny>
            <textcolor>$INFO[Skin.String(BingiePrimaryTextColor)]</textcolor>
            <font>Reg26</font>                                       <!-- Default - 22 - -->
            <include>Default_Visible_Fade</include>
        </control>
    </include>

<!-- Resolution Top Box-->
    <include name="Resolution_Details_Row">
        <control type="group">
            <visible>!String.IsEmpty(Control.GetLabel(6117))</visible>
            <width>65</width>
            <height>40</height>
            <include>Default_Visible_Fade</include>
            <control type="image">
                <height>100%</height>
                <width>100%</width>
                <texture colordiffuse="$INFO[Skin.String(BingieDetailsFlagColor)]">bingie/flags/frame.png</texture>
            </control>
            <control type="label" id="6117">
                <width>100%</width>
                <height>100%</height>
                <aligny>center</aligny>
                <align>center</align>
                <textcolor>$INFO[Skin.String(BingiePrimaryTextColor)]</textcolor>
                <font>Reg22</font>
                <scroll>false</scroll>
                <label>$VAR[GetResolution,[B],[/B]]</label>
            </control>
        </control>
    </include>

<!-- Audio Channels Top Box-->
    <include name="Audio_Channels_Details_Row">
        <control type="group">
            <visible>!String.IsEmpty(Control.GetLabel(6118))</visible>
            <width>55</width>
            <height>40</height>
            <include>Default_Visible_Fade</include>
            <control type="image">
                <height>100%</height>
                <width>100%</width>
                <texture colordiffuse="$INFO[Skin.String(BingieDetailsFlagColor)]">bingie/flags/frame.png</texture>
            </control>
            <control type="label" id="6118">
                <width>100%</width>
                <height>100%</height>
                <aligny>center</aligny>
                <align>center</align>
                <textcolor>$INFO[Skin.String(BingiePrimaryTextColor)]</textcolor>
                <font>Bold22</font>
                <scroll>false</scroll>
                <label>$VAR[GetAudioChannels]</label>
            </control>
        </control>
    </include>
    <!-- END OF DETAILS ROW INCLUDES-->

	<!-- Spotlight Row Details Gap-->
	<include name="SpotlightRowDetails">
		<control type="grouplist">
			<orientation>horizontal</orientation>
			<usecontrolcoords>true</usecontrolcoords>
			<top>10</top>
			<height>50</height>        <!-- default -40- -->
			<itemgap>15</itemgap>
            <include>New_Tag_Details_Row</include>
            <include condition="!Skin.HasSetting(DisableThumbsUpDown)">Thumbs_Up_Down_Details_Row</include>
            <include condition="Skin.HasSetting(PreferStarsRatingBingie)">Stars_Rating_Details_Row</include>
            <include condition="!Skin.HasSetting(PreferStarsRatingBingie)">Percentage_Rating_Details_Row</include>
            <include>Year_Premiered_PVRTime_Details_Row</include>
            <include>MPAA_Details_Row</include>
            <include>Duration_TotalSeasonsEpisodes_Details_Row</include>
            <include>Resolution_Details_Row</include>
            <include>Audio_Channels_Details_Row</include>
		</control>
	</include>

    <!-- Bingie additional info -->
    <include name="Bingie_Additional_Info">
        <param name="top" default="10" />
        <param name="visibility" default="true" />
          <definition>
              <control type="grouplist">
                  <nested/>
                  <visible>$PARAM[visibility]</visible>
                  <top>$PARAM[top]</top>
                  <height>62</height>
                  <width>800</width>
                  <itemgap>25</itemgap>
                  <orientation>horizontal</orientation>
                  <usecontrolcoords>true</usecontrolcoords>
                  <include>Default_Visible_Fade</include>
                  <control type="group">
                      <visible>!String.IsEmpty(Control.GetLabel(84))</visible>
                      <top>3</top>
                      <height>58</height>
                      <width>58</width>
                      <control type="image">     <!-- Red Circle Icons Under Clearlogo-->
                          <animation effect="fade" time="150">Visible</animation>
                          <animation effect="fade" time="0" end="60" condition="true">Conditional</animation>
                          <align>left</align>
                          <aligny>center</aligny>
                          <texture>$VAR[BingieMoreDetailsImage,bingie/details/,.png]</texture>
                          <colordiffuse>red</colordiffuse>
                      </control>
                  </control>
<!-- Red Circle More Details - Under Movie Info -->
				  <control type="textbox" id="84">
                      <animation effect="fade" time="150">Visible</animation>
                      <height>60</height>
                      <width>550</width>
                      <label>$VAR[BingieMoreDetails]</label>
                      <textcolor>$INFO[Skin.String(BingieSecondaryTextColor)]</textcolor>
                      <align>left</align>
                      <aligny>center</aligny>
                      <font>Reg22</font>
                      <autoscroll>false</autoscroll>
                  </control>
              </control>
          </definition>
    </include>

    <!-- Thumbs Down/Up Includes -->
    <include name="ThumbsUpMinCondition">
        <include condition="String.IsEqual(Skin.String(ThumbsUpMin),-1)">DisableVisibility</include>
        <include condition="String.IsEqual(Skin.String(ThumbsUpMin),6)">ThumbsUpMin6</include>
        <include condition="String.IsEqual(Skin.String(ThumbsUpMin),7)">ThumbsUpMin7</include>
        <include condition="String.IsEqual(Skin.String(ThumbsUpMin),8)">ThumbsUpMin8</include>
        <include condition="String.IsEqual(Skin.String(ThumbsUpMin),9)">ThumbsUpMin9</include>
        <include condition="String.IsEqual(Skin.String(ThumbsUpMin),10)">ThumbsUpMin10</include>
    </include>

    <include name="ThumbsDownMaxCondition">
        <include condition="String.IsEqual(Skin.String(ThumbsDownMax),-1)">DisableVisibility</include>
        <include condition="String.IsEqual(Skin.String(ThumbsDownMax),5)">ThumbsDownMax5</include>
        <include condition="String.IsEqual(Skin.String(ThumbsDownMax),4)">ThumbsDownMax4</include>
        <include condition="String.IsEqual(Skin.String(ThumbsDownMax),3)">ThumbsDownMax3</include>
        <include condition="String.IsEqual(Skin.String(ThumbsDownMax),2)">ThumbsDownMax2</include>
        <include condition="String.IsEqual(Skin.String(ThumbsDownMax),1)">ThumbsDownMax1</include>
    </include>

    <include name="ThumbsUpMin6"><visible>[Integer.IsGreaterOrEqual(ListItem.UserRating,6) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),like) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>
    <include name="ThumbsUpMin7"><visible>[Integer.IsGreaterOrEqual(ListItem.UserRating,7) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),like) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>
    <include name="ThumbsUpMin8"><visible>[Integer.IsGreaterOrEqual(ListItem.UserRating,8) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),like) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>
    <include name="ThumbsUpMin9"><visible>[Integer.IsGreaterOrEqual(ListItem.UserRating,9) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),like) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>
    <include name="ThumbsUpMin10"><visible>[Integer.IsGreaterOrEqual(ListItem.UserRating,10) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),like) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>

    <include name="ThumbsDownMax5"><visible>[!String.IsEmpty(ListItem.UserRating) + Integer.IsLessOrEqual(ListItem.UserRating,5) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),dislike) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>
    <include name="ThumbsDownMax4"><visible>[!String.IsEmpty(ListItem.UserRating) + Integer.IsLessOrEqual(ListItem.UserRating,4) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),dislike) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>
    <include name="ThumbsDownMax3"><visible>[!String.IsEmpty(ListItem.UserRating) + Integer.IsLessOrEqual(ListItem.UserRating,3) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),dislike) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>
    <include name="ThumbsDownMax2"><visible>[!String.IsEmpty(ListItem.UserRating) + Integer.IsLessOrEqual(ListItem.UserRating,2) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),dislike) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>
    <include name="ThumbsDownMax1"><visible>[!String.IsEmpty(ListItem.UserRating) + Integer.IsLessOrEqual(ListItem.UserRating,1) + String.IsEmpty(Window(Home).Property(RateTitle))] | [String.IsEqual(Window(Home).Property(RateTitle.Action),dislike) + String.IsEqual(Window(Home).Property(RateTitle),ListItem.DBID)]</visible></include>

    <!-- disable visibility -->
    <include name="DisableVisibility"><visible>false</visible></include>

    <include name="hiddenSubmenu">
        <!-- hidden submenu to do count calculations -->
        <control type="list" id="4445">
            <left>-3000</left>
            <top>-3000</top>
            <width>1</width>
            <height>1</height>
            <pagecontrol/>
            <orientation>vertical</orientation>
            <itemlayout width="1" height="1">
            </itemlayout>
            <focusedlayout width="1" height="1">
            </focusedlayout>
            <content><include>skinshortcuts-submenu</include></content>
        </control>
    </include>

    <include name="MainMenuContent">
        <content>
            <include>skinshortcuts-mainmenu</include>
        </content>
    </include>
    <!-- variables -->

    <!-- New Item Tag -->
    <variable name="NewItem">
        <value condition="$EXP[IsMovieDBType]">$VAR[NewMovieItem]</value>
        <value condition="$EXP[IsEpisodeDBType]">$VAR[NewEpisodeItem]</value>
        <value condition="$EXP[IsTvShowDBType]">$VAR[NewTVShowItem]</value>
    </variable>

    <!-- New Movie -->
    <variable name="NewMovieItem">
        <!-- last 10 added movies -->
        <value condition="String.IsEqual(Window(Home).Property(LatestMovie.1.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),ListItem.Title) |
        String.IsEqual(Window(Home).Property(LatestMovie.3.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),ListItem.Title) |
        String.IsEqual(Window(Home).Property(LatestMovie.5.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),ListItem.Title) |
        String.IsEqual(Window(Home).Property(LatestMovie.7.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),ListItem.Title) |
        String.IsEqual(Window(Home).Property(LatestMovie.9.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),ListItem.Title)">$LOCALIZE[31837]</value>
    </variable>

    <!-- New TVShow -->
    <variable name="NewTVShowItem">
        <!-- last 10 added episodes that are ep. in season 1 of the tvshow -->
        <value condition="[String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeSeason),1)]">$LOCALIZE[31837]</value>
    </variable>

    <!-- New Episode -->
    <variable name="NewEpisodeItem">
        <!-- new episode: last 10 added ep. -->
        <value condition="[String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TVShowTitle)]">$LOCALIZE[31837]</value>
    </variable>

	<!-- Choose Year / Premiered / PVR -->
	<variable name="YearOrPremieredOrPVR">
		<value condition="$EXP[IsEpisodeDBType]">$VAR[GetPremiered]</value>
        <value condition="String.IsEmpty(ListItem.DBTYPE) + !String.IsEmpty(ListItem.StartTime)">$VAR[GetPVRTimings]</value>
        <value>$VAR[GetYear]</value>
	</variable>

	<!-- Choose Duration Or Total Seasons/Episodes count -->
	<variable name="DurationOrTotalSECount">
		<value condition="$EXP[IsTvShowDBType]">$VAR[GetTotalSeasonEpisodeCount]</value>
		<value>$VAR[GetDuration]</value>
	</variable>

	<!-- Premiered Info -->
	<variable name="GetPremiered">
		<value condition="!String.IsEmpty(ListItem.Premiered)">$INFO[ListItem.Premiered]</value>
		<value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Premiered))">$INFO[Window(Home).Property(ListItem.Premiered)]</value>
	</variable>

	<!--Year Info -->
	<variable name="GetYear">
		<value condition="!String.IsEmpty(ListItem.Year)">$INFO[ListItem.Year]</value>
		<value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Year))">$INFO[Window(Home).Property(ListItem.Year)]</value>
	</variable>

    <!-- PVR Times Info (Start, Date, etc) -->
    <variable name="GetPVRTimings">
        <value condition="String.StartsWith(ListItem.Path,pvr://recordings)">$INFO[ListItem.StartDate,, | ]$INFO[ListItem.StartTime]$INFO[ListItem.EndTime, - ]</value>
        <value condition="!String.IsEmpty(ListItem.StartTime)">$INFO[ListItem.StartTime]$INFO[ListItem.EndTime, - ]</value>
    </variable>

    <!--Duration Info -->
    <variable name="GetDuration">
        <!-- Hours not disabled -->
        <!-- normal -->
        <value condition="!Skin.HasSetting(DisableHoursDuration) + Integer.IsGreater(ListItem.Duration(h),0)">$INFO[ListItem.Duration(h),,h ]$INFO[ListItem.Duration(m),,m]</value>
        <value condition="!Skin.HasSetting(DisableHoursDuration) + !String.IsEmpty(ListItem.Duration) + Integer.IsEqual(ListItem.Duration(h),0)">$INFO[ListItem.Duration(mins),,m]</value>
        <!-- fallback -->
        <value condition="$EXP[IsMainMenuOpened] + !Skin.HasSetting(DisableHoursDuration) + Integer.IsGreater(Window(Home).Property(ListItem.Duration.Hours),0)">$INFO[Window(Home).Property(ListItem.Duration.Hours),,h ]$INFO[Window(Home).Property(ListItem.Duration.M),,m]</value>
        <value condition="$EXP[IsMainMenuOpened] + !Skin.HasSetting(DisableHoursDuration) + !String.IsEmpty(Window(Home).Property(ListItem.Duration.Hours)) + Integer.IsEqual(Window(Home).Property(ListItem.Duration.Hours),0)">$INFO[Window(Home).Property(ListItem.Duration.Mins),,m]</value>
        <!-- Hours disabled -->
        <value condition="Skin.HasSetting(DisableHoursDuration) + !String.IsEmpty(ListItem.Duration)">$INFO[ListItem.Duration(mins),,m]</value>
        <value condition="$EXP[IsMainMenuOpened] + Skin.HasSetting(DisableHoursDuration) + !String.IsEmpty(Window(Home).Property(ListItem.Duration))">$INFO[Window(Home).Property(ListItem.Duration.Mins),,m]</value>
        <!-- regular format fallback -->
        <value condition="!String.IsEmpty(ListItem.Duration)">$INFO[ListItem.Duration]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Duration))">$INFO[Window(Home).Property(ListItem.Duration)]</value>
    </variable>

    <!-- Total Seasons/Episodes Info -->
    <variable name="GetTotalSeasonEpisodeCount">
        <!--normal-->
        <value condition="Integer.IsGreater(ListItem.Property(TotalEpisodes),1) + Integer.IsGreater(ListItem.Property(TotalSeasons),1)">$INFO[ListItem.Property(TotalSeasons),, $LOCALIZE[33054]]</value>
        <value condition="Integer.IsGreater(ListItem.Property(TotalEpisodes),1) + Integer.IsEqual(ListItem.Property(TotalSeasons),1)">$INFO[ListItem.Property(TotalSeasons),, $LOCALIZE[20373]]</value>
        <value condition="Integer.IsEqual(ListItem.Property(TotalEpisodes),1)">$INFO[ListItem.Property(TotalEpisodes),, $LOCALIZE[20359]]</value>
        <value condition="!String.IsEmpty(ListItem.Property(TotalEpisodes)) + Integer.IsEqual(ListItem.Property(TotalEpisodes),0)">$INFO[ListItem.Property(TotalEpisodes),, $LOCALIZE[20360]]</value>
        <!-- fallback -->
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.TotalEpisodes)) + Integer.IsGreater(Window(Home).Property(ListItem.TotalSeasons),1)">$INFO[Window(Home).Property(ListItem.TotalSeasons),, $LOCALIZE[33054]]</value>
        <value condition="$EXP[IsMainMenuOpened] + Integer.IsGreater(Window(Home).Property(ListItem.TotalEpisodes),1) + Integer.IsEqual(Window(Home).Property(ListItem.TotalSeasons),1)">$INFO[Window(Home).Property(ListItem.TotalSeasons),, $LOCALIZE[20373]]</value>
        <value condition="$EXP[IsMainMenuOpened] + Integer.IsEqual(Window(Home).Property(ListItem.TotalEpisodes),1)">$INFO[Window(Home).Property(ListItem.TotalEpisodes),, $LOCALIZE[20359]]</value>
        <value condition="$EXP[IsMainMenuOpened] + Integer.IsEqual(Window(Home).Property(ListItem.TotalEpisodes),0)">$INFO[Window(Home).Property(ListItem.TotalEpisodes),, $LOCALIZE[20360]]</value>
    </variable>

    <!-- MPAA Info -->
    <variable name="GetMPAA">
        <!-- contains is very slow! -->
        <!-- normal listitems -->
        <!-- US -->
        <value condition="String.Contains(ListItem.mpaa,US:G) | String.Contains(ListItem.mpaa,USA:G) | String.Contains(ListItem.mpaa,Rated G)">G</value>
        <value condition="String.Contains(ListItem.mpaa,PG-13)">PG-13</value>
        <value condition="String.Contains(ListItem.mpaa,Rated PG) | String.IsEqual(ListItem.Mpaa,PG)">PG</value>
        <value condition="String.Contains(ListItem.mpaa,US:R) | String.Contains(ListItem.mpaa,USA:R) | String.Contains(ListItem.mpaa,Rated R) | String.IsEqual(ListItem.mpaa,R)">R</value>
        <value condition="String.Contains(ListItem.mpaa,US:NC-17)| String.Contains(ListItem.mpaa,USA:NC-17)| String.Contains(ListItem.mpaa,Rated NC-17)">NC-17</value>
        <!-- UK -->
        <value condition="String.Contains(ListItem.mpaa,UK:U)">UK-ALL</value>
        <value condition="String.Contains(ListItem.mpaa,UK:PG)">UK-PG</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12A)">UK-12A</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12)">UK-12</value>
        <value condition="String.Contains(ListItem.mpaa,UK:15)">UK-15</value>
        <value condition="String.Contains(ListItem.mpaa,UK:18)">UK-18</value>
        <!-- DE -->
        <value condition="String.Contains(ListItem.mpaa,Germany:16) | String.Contains(ListItem.mpaa,ab 16) | String.Contains(ListItem.mpaa,FSK 16)">FSK-16</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:6)| String.Contains(ListItem.mpaa,ab 6) | String.Contains(ListItem.mpaa,FSK 6)">FSK-6</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:12) | String.Contains(ListItem.mpaa,ab 12) | String.Contains(ListItem.mpaa,FSK 12)">FSK-12</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:18) | String.Contains(ListItem.mpaa,ab 18) | String.Contains(ListItem.mpaa,FSK 18)">FSK-18</value>
        <value condition="String.Contains(ListItem.mpaa,Germany)|String.Contains(ListItem.mpaa,FSK)| String.Contains(ListItem.mpaa,o.A) | String.Contains(ListItem.mpaa,FSK 0)">FSK-0</value>
        <value condition="String.Contains(ListItem.mpaa,besorolás alatt)">BA</value>
        <!-- HU -->
        <value condition="String.Contains(ListItem.mpaa,korhatárra való tekintett nélkül megtekintetheto)">KN</value>
        <value condition="String.Contains(ListItem.mpaa,12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">12</value>
        <value condition="String.Contains(ListItem.mpaa,16 éven aluliak számára nem ajánlott)">16</value>
        <value condition="String.Contains(ListItem.mpaa,18 éven aluliak számára nem ajánlott)">18</value>
        <!-- FR -->
        <value condition="String.Contains(ListItem.mpaa,France:U) | String.Contains(ListItem.mpaa,partir de 3 ans) | String.Contains(ListItem.mpaa,partir de 6 ans)">CSA-U</value>
        <value condition="String.Contains(ListItem.mpaa,France:-10) | String.Contains(ListItem.mpaa,Interdit aux moins de 10 ans) | String.Contains(ListItem.mpaa,des propos ou des images peuvent heurter)">CSA-10</value>
        <value condition="String.Contains(ListItem.mpaa,France:-12) | String.Contains(ListItem.mpaa,Interdit aux moins de 12 ans)">CSA-12</value>
        <value condition="String.Contains(ListItem.mpaa,France:-16) | String.Contains(ListItem.mpaa,Interdit aux moins de 16 ans)">CSA-16</value>
        <value condition="String.Contains(ListItem.mpaa,France:-18) | String.Contains(ListItem.mpaa,Interdit aux moins de 18 ans)">CSA-18</value>
        <!-- BR -->
        <value condition="String.Contains(ListItem.mpaa,Brazil:Livre) | String.Contains(ListItem.mpaa,Livre)">L</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:10) | String.Contains(ListItem.mpaa,10 anos)">10</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:12) | String.Contains(ListItem.mpaa,12 anos)">12</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:14) | String.Contains(ListItem.mpaa,14 anos)">14</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:16) | String.Contains(ListItem.mpaa,16 anos)">16</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:18) | String.Contains(ListItem.mpaa,18 anos)">18</value>
        <value condition="!String.IsEmpty(ListItem.mpaa) + !String.Contains(ListItem.mpaa,not rated) + !String.Contains(ListItem.mpaa,n/a)">$INFO[ListItem.MPAA]</value>
<!-- home widgets -->
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),US:G) | String.Contains(Window(Home).Property(ListItem.mpaa),USA:G) | String.Contains(Window(Home).Property(ListItem.mpaa),Rated G)]">G</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),PG-13)">PG-13</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Rated PG) | String.IsEqual(Window(Home).Property(ListItem.Mpaa),PG)]">PG</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),US:R) | String.Contains(Window(Home).Property(ListItem.mpaa),USA:R) | String.Contains(Window(Home).Property(ListItem.mpaa),Rated R) | String.IsEqual(Window(Home).Property(ListItem.mpaa),R)]">R</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),US:NC-17)| String.Contains(Window(Home).Property(ListItem.mpaa),USA:NC-17)| String.Contains(Window(Home).Property(ListItem.mpaa),Rated NC-17)]">NC-17</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),UK:U)">UK-ALL</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),UK:PG)">UK-PG</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),UK:12A)">UK-12A</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),UK:12)">UK-12</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),UK:15)">UK-15</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),UK:18)">UK-18</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Germany:16) | String.Contains(Window(Home).Property(ListItem.mpaa),ab 16) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 16)]">FSK-16</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Germany:6)| String.Contains(Window(Home).Property(ListItem.mpaa),ab 6) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 6)]">FSK-6</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Germany:12) | String.Contains(Window(Home).Property(ListItem.mpaa),ab 12) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 12)]">FSK-12</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Germany:18) | String.Contains(Window(Home).Property(ListItem.mpaa),ab 18) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 18)]">FSK-18</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Germany)|String.Contains(Window(Home).Property(ListItem.mpaa),FSK)| String.Contains(Window(Home).Property(ListItem.mpaa),o.A) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 0)]">FSK-0</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),besorolás alatt)">BA</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),korhatárra való tekintett nélkül megtekintetheto)">KN</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">12</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),16 éven aluliak számára nem ajánlott)">16</value>
        <value condition="$EXP[IsMainMenuOpened] + String.Contains(Window(Home).Property(ListItem.mpaa),18 éven aluliak számára nem ajánlott)">18</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),France:U) | String.Contains(Window(Home).Property(ListItem.mpaa),partir de 3 ans) | String.Contains(Window(Home).Property(ListItem.mpaa),partir de 6 ans)]">CSA-U</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),France:-10) | String.Contains(Window(Home).Property(ListItem.mpaa),Interdit aux moins de 10 ans) | String.Contains(Window(Home).Property(ListItem.mpaa),des propos ou des images peuvent heurter)]">CSA-10</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),France:-12) | String.Contains(Window(Home).Property(ListItem.mpaa),Interdit aux moins de 12 ans)]">CSA-12</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),France:-16) | String.Contains(Window(Home).Property(ListItem.mpaa),Interdit aux moins de 16 ans)]">CSA-16</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),France:-18) | String.Contains(Window(Home).Property(ListItem.mpaa),Interdit aux moins de 18 ans)]">CSA-18</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:Livre) | String.Contains(Window(Home).Property(ListItem.mpaa),Livre)]">L</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:10) | String.Contains(Window(Home).Property(ListItem.mpaa),10 anos)]">10</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:12) | String.Contains(Window(Home).Property(ListItem.mpaa),12 anos)]">12</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:14) | String.Contains(Window(Home).Property(ListItem.mpaa),14 anos)]">14</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:16) | String.Contains(Window(Home).Property(ListItem.mpaa),16 anos)]">16</value>
        <value condition="$EXP[IsMainMenuOpened] + [String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:18) | String.Contains(Window(Home).Property(ListItem.mpaa),18 anos)]">18</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.mpaa)) + !String.Contains(Window(Home).Property(ListItem.mpaa),not rated)">$INFO[Window(Home).Property(ListItem.MPAA)]</value>
    </variable>

<!-- Resolution Info -->
	<variable name="GetResolution">
		<!--normal-->
		<value condition="ListItem.IsStereoscopic">3D</value>
		<value condition="Integer.IsGreater(ListItem.VideoResolution,1080) | String.IsEqual(ListItem.VideoResolution,4K) | String.IsEqual(ListItem.VideoResolution,8K)">UHD</value>
		<value condition="Integer.IsGreater(ListItem.VideoResolution,700)">HD</value>
		<value condition="!String.IsEmpty(ListItem.VideoResolution)">SD</value>
		<!--home-->
		<value condition="$EXP[IsMainMenuOpened] + Window(Home).Property(ListItem.IsStereoscopic)">3D</value>
		<value condition="$EXP[IsMainMenuOpened] + Integer.IsGreater(Window(Home).Property(ListItem.VideoResolution),1080) | String.IsEqual(Window(Home).Property(ListItem.VideoResolution),4K)
		 | String.IsEqual(Window(Home).Property(ListItem.VideoResolution),8K)">UHD</value>
		<value condition="$EXP[IsMainMenuOpened] + Integer.IsGreater(Window(Home).Property(ListItem.VideoResolution),700)">HD</value>
		<value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.VideoResolution))">SD</value>
	</variable>

	<!-- Audio Channels Info (from 5.1 and up) -->
	<variable name="GetAudioChannels">
		<!--normal-->
		<value condition="String.IsEqual(ListItem.AudioChannels,6)">5.1</value>
		<value condition="String.IsEqual(ListItem.AudioChannels,7)">6.1</value>
		<value condition="String.IsEqual(ListItem.AudioChannels,8)">7.1</value>
		<value condition="String.IsEqual(ListItem.AudioChannels,9)">8.1</value>
		<value condition="String.IsEqual(ListItem.AudioChannels,10)">9.1</value>
		<!--home-->
		<value condition="$EXP[IsMainMenuOpened] + String.IsEqual(Window(Home).Property(ListItem.AudioChannels),6)">5.1</value>
		<value condition="$EXP[IsMainMenuOpened] + String.IsEqual(Window(Home).Property(ListItem.AudioChannels),7)">6.1</value>
		<value condition="$EXP[IsMainMenuOpened] + String.IsEqual(Window(Home).Property(ListItem.AudioChannels),8)">7.1</value>
		<value condition="$EXP[IsMainMenuOpened] + String.IsEqual(Window(Home).Property(ListItem.AudioChannels),9)">8.1</value>
		<value condition="$EXP[IsMainMenuOpened] + String.IsEqual(Window(Home).Property(ListItem.AudioChannels),10)">9.1</value>
	</variable>

    <!-- bingie home clearlogo -->
    <variable name="BingieInfoClearlogo">
        <value condition="Skin.HasSetting(NoClearLogoBingie)">colors/color_transparent.png</value>
        <!-- normal -->
        <value condition="!String.IsEmpty(ListItem.Art(tvshow.clearlogo))">$INFO[ListItem.Art(tvshow.clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(clearlogo))">$INFO[ListItem.Art(clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(ChannelLogo))">$INFO[ListItem.Property(ChannelLogo)]</value>
        <!-- home -->
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Art.tvshow.clearlogo))">$INFO[Window(Home).Property(ListItem.Art.tvshow.clearlogo)]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.ClearLogo))">$INFO[Window(Home).Property(ListItem.ClearLogo)]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.ChannelLogo))">$INFO[Window(Home).Property(ListItem.ChannelLogo)]</value>
    </variable>

    <variable name="BingieSpotlightBackground">
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(season.fanart))">$INFO[Container(1508).ListItem.Art(season.fanart)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(tvshow.fanart))">$INFO[Container(1508).ListItem.Art(tvshow.fanart)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(fanart))">$INFO[Container(1508).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(artist.fanart))">$INFO[Container(1508).ListItem.Art(artist.fanart)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(albumartist.fanart))">$INFO[Container(1508).ListItem.Art(albumartist.fanart)]</value>
    </variable>

    <variable name="BingieSpotlightLogo">
        <value condition="Skin.HasSetting(NoClearLogoBingie)">colors/color_transparent.png</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(tvshow.clearlogo))">$INFO[Container(1508).ListItem.Art(tvshow.clearlogo)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(clearlogo))">$INFO[Container(1508).ListItem.Art(clearlogo)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Property(ChannelLogo))">$INFO[Container(1508).ListItem.Property(ChannelLogo)]</value>
    </variable>

    <variable name="BingieSpotlightTitle">
        <value condition="!String.IsEmpty(Container(1508).ListItem.TVShowTitle)">$INFO[Container(1508).ListItem.TVShowTitle]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Title)">$INFO[Container(1508).ListItem.Title]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Label)">$INFO[Container(1508).ListItem.Label]</value>
    </variable>

    <variable name="BingieInfoLabel">
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Label)) + [$EXP[IsCategoryDBType] | [!String.IsEmpty(Window(Home).Property(ListItem.StartTime)) | String.StartsWith(Window(Home).Property(ListItem.FolderPath), pvr://)]]">[B]$INFO[Window(Home).Property(ListItem.Label)][/B]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.ChannelName)) + String.Contains(Window(Home).Property(ListItem.ChannelName),unknown) + !String.IsEmpty(Window(Home).Property(ListItem.ChannelNumberLabel))">[B]$INFO[Window(Home).Property(ListItem.ChannelNumberLabel),$LOCALIZE[19029] ,][/B]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.ChannelName))">[B]$INFO[Window(Home).Property(ListItem.ChannelName)][/B]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Episode)) + !String.IsEqual(Window(Home).Property(ListItem.TvShowTitle),Window(Home).Property(ListItem.Title))">[B]$INFO[Window(Home).Property(ListItem.TvShowTitle)][/B]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Artist))">[B]$INFO[Window(Home).Property(ListItem.Artist)][/B]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Title))">[B]$INFO[Window(Home).Property(ListItem.Title)][/B]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(ListItem.Label)">[B]$INFO[Window(Home).Property(ListItem.Label)][/B]</value>

        <value condition="String.IsEqual(ListItem.Property(DBTYPE), systeminfo)">[B]$INFO[ListItem.label][/B] $INFO[ListItem.label2]</value>
        <value condition="!String.IsEmpty(ListItem.ChannelName) + String.Contains(ListItem.ChannelName,unknown) + !String.IsEmpty(ListItem.ChannelNumberLabel)">[B]$INFO[ListItem.ChannelNumberLabel,$LOCALIZE[19029] ,][/B]</value>
        <value condition="!String.IsEmpty(ListItem.ChannelName)">[B]$INFO[ListItem.ChannelName][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Label) + [[!String.IsEmpty(ListItem.StartTime) | String.StartsWith(ListItem.FolderPath, pvr://)] | [Container.Content(genres) | String.IsEqual(ListItem.DBTYPE,genre)] | $EXP[IsCategoryDBType]]">[B]$INFO[ListItem.Label][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Season) + !String.IsEmpty(ListItem.Episode) + !String.IsEqual(ListItem.TvShowTitle,ListItem.Title)">[B]$VAR[TVShowTitle][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Artist)">[B]$INFO[ListItem.Artist][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Title)">[B]$INFO[ListItem.Title][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Label)">[B]$INFO[ListItem.Label][/B]</value>
    </variable>

    <!-- Bingie Sublabel - tagline/watch now/album or song/pvr -->
    <variable name="BingieSublabel">
        <value condition="$EXP[IsTvShowDBTypeNoFallback] + $EXP[IsTVShowInLastEpisodes]">[B]$VAR[GetNewEpisodesTVShowSeason,$LOCALIZE[31070] , $LOCALIZE[31067]][/B]</value>
        <value condition="$EXP[IsMainMenuOpened] + $EXP[IsTvShowDBType] + $EXP[IsTVShowInLastEpisodesBasedOnProps]">[B]$VAR[GetNewEpisodesTVShowSeasonBasedOnProps,$LOCALIZE[31070] , $LOCALIZE[31067]][/B]</value>
        <value condition="$EXP[IsTvShowDBTypeNoFallback] + !String.IsEmpty(ListItem.Property(TotalSeasons)) + !Integer.IsEqual(ListItem.Property(TotalSeasons),0) + !Integer.IsEqual(ListItem.Property(TotalSeasons),1) + String.IsEqual(ListItem.Property(UnWatchedEpisodes),ListItem.Property(TotalEpisodes))">[B]$LOCALIZE[31840][/B]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.TotalSeasons)) + !Integer.IsEqual(Window(Home).Property(ListItem.TotalSeasons),0) + !Integer.IsEqual(Window(Home).Property(ListItem.TotalSeasons),1) + String.IsEqual(Window(Home).Property(ListItem.UnWatchedEpisodes),Window(Home).Property(ListItem.TotalEpisodes))">[B]$LOCALIZE[31840][/B]</value>

        <value condition="[String.IsEqual(ListItem.DBTYPE,album)  | String.IsEqual(Window(Home).Property(ListItem.DBTYPE),album)]">$INFO[ListItem.Album]</value>
        <value condition="!String.IsEmpty(ListItem.Artist)">$INFO[ListItem.TrackNumber,#, ]$INFO[ListItem.Title, ","]$INFO[ListItem.Album, (,)]</value>
        <value condition="String.IsEmpty(ListItem.DBTYPE) + !String.IsEmpty(ListItem.StartTime) + !String.IsEmpty(ListItem.Title)">[B]$INFO[ListItem.Title][/B]</value>
        <value condition="String.IsEmpty(ListItem.DBTYPE) + !String.IsEmpty(ListItem.StartTime) + !String.IsEmpty(ListItem.Label2)">[B]$INFO[ListItem.Label2][/B]</value>
    </variable>

    <variable name="GetNewEpisodesTVShowSeason">
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.10.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.9.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.8.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.7.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.6.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.5.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.4.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.3.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.2.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.Title)">$INFO[Window(Home).Property(LatestEpisode.1.EpisodeSeason)]</value>
    </variable>

    <variable name="GetNewEpisodesTVShowSeasonBasedOnProps">
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.10.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.9.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.8.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.7.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.6.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.5.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.4.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.3.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.2.EpisodeSeason)]</value>
        <value condition="String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(LatestEpisode.1.EpisodeSeason)]</value>
    </variable>

    <variable name="BingiePVRUpNextlabel">
        <value condition="!String.IsEmpty(ListItem.NextTitle) + !String.IsEmpty(ListItem.NextStartTime) + !String.IsEmpty(ListItem.NextEndTime)">[B]$INFO[ListItem.NextTitle][/B]$INFO[ListItem.NextStartTime, (]$INFO[ListItem.NextEndTime, - ,)]</value>
        <value condition="!String.IsEmpty(ListItem.NextTitle) + !String.IsEmpty(ListItem.NextStartTime)">[B]$INFO[ListItem.NextTitle][/B]$INFO[ListItem.NextStartTime, (,)]</value>
        <value>[B]$INFO[ListItem.NextTitle][/B]</value>
    </variable>

    <variable name="BingieSpotlightSublabel">
        <value condition="String.IsEqual(Container(1508).ListItem.DBTYPE,tvshow) + Integer.IsGreater(Container(15081).NumItems,0)">[B]$INFO[Container(15081).ListItem.Season,$LOCALIZE[31070] , $LOCALIZE[31067]][/B]</value>
        <value condition="String.IsEqual(Container(1508).ListItem.DBTYPE,episode) + !String.IsEmpty(Container(1508).ListItem.Season) + !String.IsEmpty(Container(1508).ListItem.Episode) +
        !String.IsEmpty(Container(1508).ListItem.Title)">[B]$LOCALIZE[31066] [UPPERCASE]$INFO[Container(1508).ListItem.Season,$LOCALIZE[31871],]$INFO[Container(1508).ListItem.Episode,$LOCALIZE[31872],][/UPPERCASE]$INFO[Container(1508).ListItem.Title, ","] $LOCALIZE[31067][/B]</value>
        <value>[B]$LOCALIZE[31841][/B]</value>
    </variable>

    <variable name="SpotlightTVShowEpisodesPath">
        <value condition="!String.IsEmpty(Container(1508).ListItem.DBID)">videodb://tvshows/titles/$INFO[Container(1508).ListItem.DBID]/-2/</value>
    </variable>

    <variable name="SpotlightLandscapeImage">
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(season.landscape))">$INFO[Container(1508).ListItem.Art(season.landscape)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(tvshow.landscape))">$INFO[Container(1508).ListItem.Art(tvshow.landscape)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(landscape))">$INFO[Container(1508).ListItem.Art(landscape)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(tvshow.fanart))">$INFO[Container(1508).ListItem.Art(tvshow.fanart)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(fanart))">$INFO[Container(1508).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Art(thumb))">$INFO[Container(1508).ListItem.Art(thumb)]</value>
    </variable>

    <!-- Bingie More Details (pseudo-random) -->
    <variable name="BingieMoreDetails">
        <value condition="Integer.IsLessOrEqual(System.Time(ss),15) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Awards))">$INFO[Window(Home).Property(SkinHelper.ListItem.Awards)]</value>
        <value condition="Integer.IsLessOrEqual(System.Time(ss),30) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.CastListing))">$INFO[Window(Home).Property(SkinHelper.ListItem.CastListing)]</value>
        <value condition="Integer.IsGreater(System.Time(ss),15) + Integer.IsLessOrEqual(System.Time(ss),30) + Integer.IsGreater(ListItem.Top250,0)">$INFO[ListItem.Top250,#, $LOCALIZE[31859]]</value>
        <value condition="Integer.IsGreater(System.Time(ss),15) + Integer.IsLessOrEqual(System.Time(ss),30) + !String.IsEmpty(ListItem.Director)">$INFO[ListItem.Director]</value>
        <value condition="!String.IsEmpty(ListItem.Genre) + !String.Contains(ListItem.Genre,unknown)">$INFO[ListItem.Genre]</value>
    </variable>
    <!-- Bingie More Details Image (pseudo-random) -->
    <variable name="BingieMoreDetailsImage">
        <value condition="Integer.IsLessOrEqual(System.Time(ss),15) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Awards))">awards</value>
        <value condition="Integer.IsLessOrEqual(System.Time(ss),30) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.CastListing))">star</value>
        <value condition="Integer.IsGreater(System.Time(ss),15) + Integer.IsLessOrEqual(System.Time(ss),30) + Integer.IsGreater(ListItem.Top250,0)">awards</value>
        <value condition="Integer.IsGreater(System.Time(ss),15) + Integer.IsLessOrEqual(System.Time(ss),30) + !String.IsEmpty(ListItem.Director)">director</value>
        <value condition="!String.IsEmpty(ListItem.Genre) + !String.Contains(ListItem.Genre,unknown)">genre</value>
    </variable>

    <variable name="BingieEpisodeInfoHeader">
        <value condition="[!String.IsEmpty(ListItem.PercentPlayed) + !Integer.IsGreater(ListItem.PercentPlayed,1)] | [$EXP[IsMainMenuOpened] + !Integer.IsGreater(Window(Home).Property(ListItem.PercentPlayed),1)]">[CAPITALIZE]$LOCALIZE[31212][/CAPITALIZE]</value>
        <value condition="!String.IsEmpty(ListItem.Season) | !String.IsEmpty(ListItem.Episode)">[CAPITALIZE]$INFO[ListItem.Season,$LOCALIZE[36904] ,]$INFO[ListItem.Episode, $LOCALIZE[36906] ,][/CAPITALIZE]</value>
        <value condition="$EXP[IsMainMenuOpened] + [!String.IsEmpty(Window(Home).Property(ListItem.Season)) | !String.IsEmpty(Window(Home).Property(ListItem.Episode))]">[CAPITALIZE]$INFO[Window(Home).Property(ListItem.Season),$LOCALIZE[36904] ,]$INFO[Window(Home).Property(ListItem.Episode), $LOCALIZE[36906] ,][/CAPITALIZE]</value>
    </variable>

    <variable name="BingieEpisodeInfoSubLabel">
        <value condition="[!String.IsEmpty(ListItem.PercentPlayed) + !Integer.IsGreater(ListItem.PercentPlayed,1)] + !String.IsEmpty(ListItem.Title)
         + [!String.IsEmpty(ListItem.Season) | !String.IsEmpty(ListItem.Episode)]">[CAPITALIZE]$INFO[ListItem.Season,$LOCALIZE[36904] ,]$INFO[ListItem.Episode, $LOCALIZE[36906] ,][/CAPITALIZE][CR]$INFO[ListItem.Title]</value>
        <value condition="[$EXP[IsMainMenuOpened] + !Integer.IsGreater(Window(Home).Property(ListItem.PercentPlayed),1)]+ !String.IsEmpty(Window(Home).Property(ListItem.Title)) + [!String.IsEmpty(Window(Home).Property(ListItem.Season)) | !String.IsEmpty(Window(Home).Property(ListItem.Episode))]">[CAPITALIZE]$INFO[Window(Home).Property(ListItem.Season),$LOCALIZE[36904] ,]$INFO[Window(Home).Property(ListItem.Episode), $LOCALIZE[36906] ,][/CAPITALIZE][CR]$INFO[Window(Home).Property(ListItem.Title)]</value>
        <value condition="!String.IsEmpty(ListItem.Title)">$INFO[ListItem.Title]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Title))">$INFO[Window(Home).Property(ListItem.Title)]</value>
        <value>[CAPITALIZE]$INFO[Window(Home).Property(ListItem.Label)][/CAPITALIZE]</value>
    </variable>

    <!-- 'SxxExx "episode_title"' format-->
    <variable name="BingieDialogEpisodeInfoLabel">
        <value condition="[String.IsEqual(ListItem.DBType,tvshow) | Container.Content(tvshows)] + !String.IsEmpty(Container(5050).ListItem.Title)">$INFO[Container(5050).ListItem.Title]</value>
        <value condition="!String.IsEmpty(ListItem.Episode) + !String.IsEmpty(ListItem.Title)">$INFO[ListItem.Title]</value>
        <!-- <value condition="[String.IsEqual(ListItem.DBType,tvshow) | Container.Content(tvshows)] + !String.IsEmpty(Container(5050).ListItem.Season) + !String.IsEmpty(Container(5050).ListItem.Episode) +
        !String.IsEmpty(Container(5050).ListItem.Title)">$INFO[Container(5050).ListItem.Season,$LOCALIZE[31871],]$INFO[Container(5050).ListItem.Episode,$LOCALIZE[31872],]$INFO[Container(5050).ListItem.Title, ","]</value>
        <value condition="!String.IsEmpty(ListItem.Season) + !String.IsEmpty(ListItem.Episode) +
        !String.IsEmpty(ListItem.Title)">[UPPERCASE]$INFO[ListItem.Season,$LOCALIZE[31871],]$INFO[ListItem.Episode,$LOCALIZE[31872],][/UPPERCASE]$INFO[ListItem.Title, ","]</value> -->
        
		<!-- fallback -->
        <value>$INFO[Window(Home).Property(ListItem.Label)]</value>
    </variable>

    <variable name="BingieDialogInfoSublabel">
        <value condition="[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(Window(Home).Property(ListItem.dbtype),episode)] | [Skin.HasSetting(ShowEpisodePlotInfoDialog) + Control.IsVisible(5050)]">$VAR[BingieDialogEpisodeInfoLabel]</value>
        <value condition="!String.IsEmpty(ListItem.TagLine)">$INFO[ListItem.TagLine]</value>
    </variable>

    <variable name="BingiePlot">
        <!-- spotlight widget (inside container) -->
        <value condition="Skin.HasSetting(WidgetsPreferPlotOutline) + !String.IsEmpty(ListItem.PlotOutline)">$INFO[ListItem.PlotOutline]</value>
        <value condition="$EXP[IsMainMenuOpened] + Skin.HasSetting(WidgetsPreferPlotOutline) + !String.IsEmpty(Window(Home).Property(ListItem.PlotOutline))">$INFO[Window(Home).Property(ListItem.PlotOutline)]</value>

        <value condition="!String.IsEmpty(ListItem.Plot)">$INFO[ListItem.Plot]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Plot))">$INFO[ListItem.Property(Plot)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Album_Description))">$INFO[ListItem.Property(Album_Description)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Artist_Description))">$INFO[ListItem.Property(Artist_Description)]</value>
        <value condition="!String.IsEmpty(ListItem.PictureDesc)">$INFO[ListItem.PictureDesc]</value>
        <value condition="!String.IsEmpty(ListItem.PictureComment)">$INFO[ListItem.PictureComment]</value>
        <value condition="!String.IsEmpty(ListItem.PictureKeywords)">$INFO[ListItem.PictureKeywords]</value>
        <!-- normal widgets info -->
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.PlotOutline)) + Skin.HasSetting(WidgetsPreferPlotOutline)">$INFO[Window(Home).Property(ListItem.PlotOutline)]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Plot))">$INFO[Window(Home).Property(ListItem.Plot)]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Album_Description))">$INFO[Window(Home).Property(ListItem.Album_Description)]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Artist_Description))">$INFO[Window(Home).Property(ListItem.Artist_Description)]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.PictureDesc))">$INFO[Window(Home).Property(ListItem.PictureDesc)]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.PictureComment))">$INFO[Window(Home).Property(ListItem.PictureComment)]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.PictureKeywords))">$INFO[Window(Home).Property(ListItem.PictureKeywords)]</value>
    </variable>

    <variable name="BingieSpotlightPlot">
        <value condition="Skin.HasSetting(WidgetsPreferPlotOutline) + !String.IsEmpty(Container(1508).ListItem.PlotOutline)">$INFO[Container(1508).ListItem.PlotOutline]</value>
        <value condition="$EXP[IsMainMenuOpened] + Skin.HasSetting(WidgetsPreferPlotOutline) + !String.IsEmpty(Window(Home).Property(ListItem.PlotOutline))">$INFO[Window(Home).Property(ListItem.PlotOutline)]</value>
        <value condition="!String.IsEmpty(Container(1508).ListItem.Plot)">$INFO[Container(1508).ListItem.Plot]</value>
    </variable>

    <!-- plot outline prioritized and per-episode plot -->
    <variable name="BingieInfoDialogPlot">
        <value condition="Skin.HasSetting(ShowEpisodePlotInfoDialog) + [String.IsEqual(ListItem.DBType,tvshow) | Container.Content(tvshows)] + !String.IsEmpty(Container(5050).ListItem.Plot)">$INFO[Container(5050).ListItem.Plot]</value>
        <!-- contains is a workaround to ignore bad scraped outline plots, should be solved at scraper level -->
        <value condition="!String.IsEmpty(ListItem.PlotOutline) + !String.Contains(ListItem.PlotOutline,$LOCALIZE[20339]: )">$INFO[ListItem.PlotOutline]</value>
        <value>$VAR[Plots]</value>
    </variable>

    <!-- plot outline prioritized for views -->
    <variable name="ViewsPlotWithOutline">
        <value condition="!String.IsEmpty(ListItem.PlotOutline) + Skin.HasSetting(WidgetsPreferPlotOutline) + !String.Contains(ListItem.PlotOutline,$LOCALIZE[20339]: )">$INFO[ListItem.PlotOutline]</value>
        <value>$VAR[Plots]</value>
    </variable>

    <variable name="BingieInfoDialogDetailsTextColor">
        <value condition="!String.IsEmpty(Window(Home).Property(TrailerOnLoad)) + String.IsEqual(Window(Home).Property(TrailerPlaying),windowed)">white</value>
        <value>$INFO[Skin.String(BingieSecondaryTextColor)]</value>
    </variable>

    <variable name="BingieInfoDialogIconColor">
        <value condition="!String.IsEmpty(Window(Home).Property(TrailerOnLoad)) + String.IsEqual(Window(Home).Property(TrailerPlaying),windowed)">white</value>
        <value>$INFO[Skin.String(BingieInfoDialogIconColor)]</value>
    </variable>

    <variable name="BingieInfoDialogButtonsTextColor">
        <value condition="!String.IsEmpty(Window(Home).Property(TrailerOnLoad)) + String.IsEqual(Window(Home).Property(TrailerPlaying),windowed)">white</value>
        <value>$INFO[Skin.String(BingiePrimaryTextColor)]</value>
    </variable>

    <variable name="BingieInfoDialogPlotTextColor">
        <value condition="!String.IsEmpty(Window(Home).Property(TrailerOnLoad)) + String.IsEqual(Window(Home).Property(TrailerPlaying),windowed)">white</value>
        <value>$INFO[Skin.String(BingiePrimaryTextColor)]</value>
    </variable>

    <!-- TVShow title & fallback for skin widgets -->
    <variable name="TVShowTitle">
        <value condition="String.IsEqual(ListItem.DBType,episode) + !String.IsEmpty(ListItem.TVShowTitle)">$INFO[ListItem.TVShowTitle]</value>
        <value condition="$EXP[IsMainMenuOpened] + String.IsEqual(Window(Home).Property(ListItem.DBType),episode) + !String.IsEmpty(Window(Home).Property(ListItem.TvShowTitle))">$INFO[Window(Home).Property(ListItem.TvShowTitle)]</value>
        <value>$INFO[ListItem.Title]</value>
    </variable>

    <!-- Profile name for widgets 'for you' -->
    <variable name="ForCurrentProfileNameLabel">
        <value condition="!String.IsEqual(System.ProfileName,Master user)">$INFO[System.ProfileName,$LOCALIZE[31862] ,]</value>
        <value>$LOCALIZE[31863]</value>
    </variable>

    <!-- Welcome notification message -->
    <variable name="WelcomeNotificationMsg">
        <value condition="!Skin.HasSetting(BingieFirstStartupDone) | !Skin.HasSetting(BingieSecondStartupDone)">[B]$LOCALIZE[31387]![/B]</value>
        <value condition="!String.IsEqual(System.ProfileName,Master user)">$INFO[System.ProfileName,$LOCALIZE[31858][CR][B],[/B]!]</value>
        <value>[B]$LOCALIZE[31858]![/B]</value>
    </variable>

    <variable name="BingieGenreIconVarList">
        <value condition="System.HasAddon(resource.images.moviegenreicons.bingie)">$INFO[ListItem.Label,resource://resource.images.moviegenreicons.bingie/,.jpg]</value>
        <value>$VAR[MovieGenreIconVarList]</value>
    </variable>

    <variable name="CategoriesBricks">
        <value>$INFO[ListItem.Label,bingie/categories/,.jpg]</value>
    </variable>

    <variable name="CategoriesFanart">
        <value condition="String.IsEqual(ListItem.Label,movies)">$INFO[Window(Home).Property(SkinHelper.AllMoviesBackground)]</value>
        <value condition="String.IsEqual(ListItem.Label,tvshows)">$INFO[Window(Home).Property(SkinHelper.AllTvShowsBackground)]</value>
        <value condition="String.IsEqual(ListItem.Label,recentlyadded)">$INFO[Window(Home).Property(SkinHelper.RecentVideosBackground)]</value>
    </variable>

    <!-- global background with fade-panel overlay -->
    <include name="GlobalFanartWithOverlay">
        <include>GlobalBackground</include>
        <control type="image">
            <width>100%</width>
            <height>100%</height>
            <texture background="true" colordiffuse="$VAR[BingiePanelColor]">colors/color_white.png</texture>
            <animation effect="fade" start="100" end="$PARAM[overlay_percent]" time="0" condition="true">Conditional</animation>
        </control>
    </include>

    <variable name="WidgetBusySpinnerPath">
        <value condition="System.HasAddon(resource.images.busyspinners.basic) + Skin.String(SkinHelper.WidgetSpinnerTexture.Path)">$INFO[Skin.String(SkinHelper.WidgetSpinnerTexture.Path)]</value>
        <value>spinner/widgets_busy_loader/</value>
    </variable>

    <variable name="DialogBusySpinnerPath">
        <value condition="System.HasAddon(resource.images.busyspinners.basic) + Skin.String(SkinHelper.SpinnerTexture.Path)">$INFO[Skin.String(SkinHelper.SpinnerTexture.Path)]</value>
        <value>spinner/busy_spinner/</value>
    </variable>

    <!-- Up Next addon vars -->
    <!-- next up resolution - is currently missing in UP-NEXT addon
    <variable name="NextUpResolution">
        <value condition="Integer.IsGreater(Control.GetLabel(3011),1080)">UHD</value>
        <value condition="Integer.IsGreater(Control.GetLabel(3011),700)">HD</value>
        <value condition="Integer.IsLess(Control.GetLabel(3011),700)">SD</value>
    </variable> -->

    <!-- next up thumb episode/tvshow based on setting preference -->
    <variable name="NextUpThumb">
        <value condition="!String.IsEmpty(Window.Property(fanart)) + Skin.HasSetting(PreferTvShowThumbWidget)">$INFO[Window.Property(fanart)]</value>
        <value condition="!String.IsEmpty(Window.Property(thumb))">$INFO[Window.Property(thumb)]</value>
        <value condition="!String.IsEmpty(Window.Property(fanart))">$INFO[Window.Property(fanart)]</value>
    </variable>

<!-- BINGIE MENU -->

    <!-- Menu -->
    <include name="BingieSideBladeMainMenu">
        <control type="group" id="9001">
            <visible>![Window.IsActive(virtualkeyboard) + !Window.IsActive(1109)]</visible>
            <include>HideWindowOnStartupAndDialogInfoLoad</include>
            <include content="posx" condition="!Skin.HasSetting(EnhancedHome_Circular)">
                <param name="posx" value="-260" />
            </include>
            <posx>-600</posx>
            <posy>0</posy>
            <include condition="Skin.HasSetting(EnhancedHome_Circular)">Circular_Menu_Animations</include>
            <include condition="!Skin.HasSetting(EnhancedHome_Circular)">No_Circular_Menu_Animations</include>
<!-- Panel Left on Click Group-->
            <control type="group">
                <top>0</top>
                <left>0</left>
                <width>bingie_menu_width</width>
                <height>100%</height>
                <control type="image">
                    <left>0</left>
                    <width>358</width>
                    <height>100%</height>
                    <colordiffuse>$VAR[BingieMenuPanelColor]</colordiffuse>
                    <aspectratio>stretch</aspectratio>
                    <texture background="true">colors/color_white.png</texture>
                </control>
                <control type="image">
                    <left>318</left>
                    <height>100%</height>
                    <width>0.6</width>
                    <colordiffuse>dimgray</colordiffuse>
                    <aspectratio>stretch</aspectratio>
                    <texture>diffuse/gradient_seperator.png</texture>
                </control>
            </control>

            <!-- Logo / User Profile Button -->
            <control type="group">
                <visible>$EXP[IsMainMenuOpened]</visible>
                <top>30</top>
                <width>bingie_menu_width</width>
                <height>80</height>
                <include>animation_fade_visible_hidden</include>
<!-- Logo Home/Show if Side Panel Open -->
                <control type="group">
                    <visible>!System.HasLoginScreen</visible>
                    <width>272</width>
                    <height>153</height>
                    <left>1650</left>
					<bottom>-980</bottom>
                    <control type="image">
                        <height>100%</height>
                        <width>100%</width>
                        <aspectratio align="left">keep</aspectratio>
                        <texture background="true">$VAR[Bingie_Logo]</texture>
                    </control>
                </control>
                <!-- profile and switch button -->
                <control type="group">
                    <top>10</top>
                    <visible>System.HasLoginScreen | Skin.HasSetting(DisableLogoMainMenu)</visible>
                    <height>60</height>
                    <control type="button" id="40000">
                        <label>[B]$INFO[System.ProfileName][/B][CR][COLOR ffc0c0c0]$LOCALIZE[31839][/COLOR]</label>
                        <textoffsetx>115</textoffsetx>
                        <align>left</align>
                        <width>359</width>
                        <textwidth>215</textwidth>
                        <height>60</height>
                        <font>Reg18</font>
                        <textcolor>$INFO[Skin.String(MainMenuTextColor)]</textcolor>
                        <focusedcolor>$INFO[Skin.String(MainMenuFocusTextColor)]</focusedcolor>
                        <texturefocus colordiffuse="$INFO[Skin.String(MainMenuSecondaryFocusButtonColor)]">colors/color_white.png</texturefocus>
                        <texturenofocus/>
                        <onup>noop</onup>
                        <ondown>900</ondown>
                        <onback>ClearProperty(ShowViewSubMenu,Home)</onback>
                        <onback>77777</onback>
                        <onright>ClearProperty(ShowViewSubMenu,Home)</onright>
                        <onright>77777</onright>
                        <onclick>ClearProperty(ShowViewSubMenu,Home)</onclick>
                        <onclick>Dialog.Close(all,true)</onclick>
                        <onclick>System.LogOff</onclick>
                    </control>
                    <control type="image">
                        <left>50</left>
                        <top>10</top>
                        <width>40</width>
                        <height>40</height>
                        <texture background="true">$INFO[System.ProfileThumb]</texture>
                    </control>
                </control>
            </control>

<!--Main Menu Items 900-->
            <control type="list" id="900">
                <top>300</top>
                <width>bingie_menu_width</width>
                <height>680</height>
                <orientation>vertical</orientation>
                <itemgap>0</itemgap>
                <onfocus condition="System.HasAlarm(focus_delay)">CancelAlarm(focus_delay,true)</onfocus>
                <onright condition="Integer.IsGreater(Container(4445).NumItems,0)">4444</onright>
                <onright condition="Integer.IsEqual(Container(4445).NumItems,0)">ClearProperty(ShowViewSubMenu,Home)</onright>
                <onright condition="Integer.IsEqual(Container(4445).NumItems,0) + !Window.IsActive(1109)">77777</onright>
                <onright condition="Integer.IsEqual(Container(4445).NumItems,0) + Window.IsActive(1109)">9000</onright>
                <onback>ClearProperty(ShowViewSubMenu,Home)</onback>
                <onback>77777</onback>
                <onup condition="Control.IsVisible(40000)">40000</onup>
                <ondown>40003</ondown>
                <itemlayout height="85" width="bingie_menu_width">
                    <include content="Bingie_Menu_Focus_Img">
                        <param name="visibility" value="$EXP[IsMainMenuOpened] + $EXP[IsMenuEntryActive]" />
                        <param name="colordiffuse" value="$INFO[Skin.String(MainMenuSecondaryFocusButtonColor)]" />
                    </include>
                    <include content="Bingie_Menu_Current_Indicator" condition="!Skin.HasSetting(EnhancedHome_Circular)">
                        <param name="keepvisible" value="true" />
                        <param name="visibility" value="$EXP[IsMenuEntryActive] + !$EXP[IsMainMenuOpened]" />
                        <param name="left" value="260" />
                    </include>
                    <include content="Bingie_Menu_Icon" condition="!Skin.HasSetting(DisableIconsMainMenu)">
                        <param name="includeAnimCond" value="true" />
                        <param name="colordiffuse" value="$INFO[Skin.String(MainMenuTextColor)]" />
                    </include>
                    <include content="Bingie_Menu_Label">
                        <param name="textcolor" value="$INFO[Skin.String(MainMenuTextColor)]" />
                    </include>
                </itemlayout>
                <focusedlayout height="85" width="bingie_menu_width" condition="Control.HasFocus(900) | Control.HasFocus(4444)">
                    <include content="Bingie_Menu_Focus_Img">
                        <param name="visibility" value="true" />
                        <param name="colordiffuse" value="$INFO[Skin.String(MainMenuFocusButtonColor)]" />
                    </include>
                    <include content="Bingie_Menu_Icon" condition="!Skin.HasSetting(DisableIconsMainMenu)">
                        <param name="includeAnimCond" value="false" />
                        <param name="colordiffuse" value="$INFO[Skin.String(MainMenuFocusTextColor)]" />
                    </include>
                    <include content="Bingie_Menu_Label">
                        <param name="textcolor" value="$INFO[Skin.String(MainMenuFocusTextColor)]" />
                    </include>
                    <include content="Bingie_Menu_Current_Indicator">
                        <param name="visibility" value="true" />
                        <param name="left" value="0" />
                    </include>
                    <!-- home behavior onfocus -->
                    <include>HiddenHomeMenuButton</include>
                </focusedlayout>
                <focusedlayout height="85" width="bingie_menu_width" condition="![Control.HasFocus(900) | Control.HasFocus(4444)]">
                    <include content="Bingie_Menu_Current_Indicator" condition="!Skin.HasSetting(EnhancedHome_Circular)">
                        <param name="keepvisible" value="true" />
                        <param name="visibility" value="$EXP[IsMenuEntryActive] + !$EXP[IsMainMenuOpened]" />
                        <param name="left" value="260" />
                    </include>
                    <include content="Bingie_Menu_Icon" condition="!Skin.HasSetting(DisableIconsMainMenu)">
                        <param name="includeAnimCond" value="true" />
                        <param name="colordiffuse" value="$INFO[Skin.String(MainMenuTextColor)]" />
                    </include>
                    <include content="Bingie_Menu_Label">
                        <param name="textcolor" value="$INFO[Skin.String(MainMenuTextColor)]" />
                    </include>
                    <!-- home behavior onfocus -->
                    <include>HiddenHomeMenuButton</include>
                </focusedlayout>
                <include condition="$EXP[IsBingieViewsActive]">MainMenuContent</include>
            </control>

            <!-- powermenu buttons -->
            <control type="list" id="40003">
                <visible>$EXP[IsMainMenuOpened] + !Skin.HasSetting(DisablePowerMenu)</visible>
                <orientation>vertical</orientation>
                <top>920</top>
                <width>359</width>
                <height>115</height>
                <onup>900</onup>
                <ondown>noop</ondown>
                <onright>ClearProperty(ShowViewSubMenu,Home)</onright>
                <onright>77777</onright>
                <onback>ClearProperty(ShowViewSubMenu,Home)</onback>
                <onback>77777</onback>
                <itemlayout width="384" height="55">
                    <include content="BingiePowerMenuItemLabel">
                        <param name="textcolor" value="$INFO[Skin.String(MainMenuTextColor)]"/>
                    </include>
                </itemlayout>
                <focusedlayout width="384" height="55">
                    <include content="Bingie_Menu_Focus_Img">
                        <param name="visibility" value="Control.HasFocus(40003)" />
                        <param name="colordiffuse" value="$INFO[Skin.String(MainMenuFocusButtonColor)]" />
                    </include>
                    <include content="BingiePowerMenuItemLabel">
                        <param name="textcolor" value="FFFFFFFF"/>
                    </include>
                </focusedlayout>
                <content><include>skinshortcuts-group-powermenu</include></content>
            </control>
        </control>
        <include condition="!Skin.HasSetting(DisableAllSubmenus)">SideBladeSubMenu</include>
    </include>

<!-- Secondary Menu Inside Left Panel -->
    <include name="SideBladeSubMenu">
        <!-- submenu -->
        <control type="group">
            <posx>378</posx>
            <posy>260</posy>
            <animation type="Conditional" condition="Control.IsVisible(4444)">
                <effect type="fade" start="0" end="80" time="250" delay="0" />
                <effect type="slide" start="-10" end="0" time="200" delay="0" tween="cubic" easing="inout"/>
            </animation>
            <animation type="Conditional" condition="String.IsEmpty(Window(Home).Property(ShowViewSubMenu))">
                <effect type="slide" start="0" end="-800" time="0" delay="0" />
            </animation>
            <animation type="Conditional" condition="!Control.IsVisible(4444)">
                <effect type="fade" start="100" end="0" time="150" delay="0" />
            </animation>
            <animation type="Conditional" condition="!Control.IsVisible(4444)">
                <effect type="slide" start="0" end="-300" time="5" delay="145" />
            </animation>
            <animation type="Conditional" condition="Integer.IsGreater(Container(900).Position,0)">
                <effect type="slide" end="0,80" time="0" delay="0" />
            </animation>
            <animation type="Conditional" condition="Integer.IsGreater(Container(900).Position,1)">
                <effect type="slide" end="0,80" time="0" delay="0" />
            </animation>
            <animation type="Conditional" condition="Integer.IsGreater(Container(900).Position,2)">
                <effect type="slide" end="0,80" time="0" delay="0" />
            </animation>
            <animation type="Conditional" condition="Integer.IsGreater(Container(900).Position,3)">
                <effect type="slide" end="0,80" time="0" delay="0" />
            </animation>
            <animation type="Conditional" condition="Integer.IsGreater(Container(900).Position,4)">
                <effect type="slide" end="0,80" time="0" delay="0" />
            </animation>

            <!--Panel on Home-->
            <control type="image">
                <posx>-20</posx>
                <width>360</width>
                <height>250</height>
                <texture background="true" border="5">diffuse/panel.png</texture>
                <colordiffuse>$INFO[Skin.String(MainMenuPanelColor)]</colordiffuse>
                <visible>Skin.String(MainMenuPanelColor) + !String.IsEqual(Skin.String(MainMenuPanelColor),None)</visible>
                <aspectratio>stretch</aspectratio>
            </control>
            <control type="list" id="4444">
                <posx>-20</posx>
                <visible allowhiddenfocus="true">[String.IsEqual(Window(Home).Property(submenu),show) | Control.HasFocus(4444)] + Integer.IsGreater(Container(4445).NumItems,0)</visible>
                <width>360</width>
                <height>250</height>
                <itemgap>3</itemgap>
                <focusposition>0</focusposition>
                <movement>3</movement>
                <onleft>900</onleft>
                <onleft>ClearProperty(submenu,Home)</onleft>
                <onright>ClearProperty(submenu,Home)</onright>
                <onright condition="Window.IsActive(1109)">9000</onright>
                <onright condition="!Window.IsActive(1109)">77777</onright>
                <onright>ClearProperty(ShowViewSubMenu,Home)</onright>
                <onup>4444</onup>
                <ondown>4444</ondown>
                <onback>900</onback>
                <onback>ClearProperty(submenu,Home)</onback>
                <itemlayout width="360" height="50">
                    <include content="Bingie_Submenu_Label">
                        <param name="textcolor" value="$INFO[Skin.String(MainMenuTextColor)]" />
                    </include>
                </itemlayout>
                <focusedlayout width="360" height="50">
                    <control type="image">
                        <texture>colors/color_white.png</texture>
                        <colordiffuse>$INFO[Skin.String(MainMenuSecondaryFocusButtonColor)]</colordiffuse>
                    </control>
                    <include content="Bingie_Submenu_Label">
                        <param name="textcolor" value="white" />
                    </include>
                    <control type="button">
                        <label/>
                        <visible>false</visible>
                        <onfocus>SetProperty(submenu,show,Home)</onfocus>
                    </control>
                </focusedlayout>
                <content>
                    <include condition="!Skin.HasSetting(DisableAllSubmenus)">skinshortcuts-submenu</include>
                </content>
            </control>
        </control>
    </include>
<!-- Bingie Menu Current Indicator - Red Under Menu Icons-->
    <include name="Bingie_Menu_Current_Indicator">
        <param name="keepvisible" default="false" />
        <definition>
            <control type="image">
                <visible>$PARAM[visibility]</visible>
                <right>$PARAM[right]</right>
                <left>58</left>
                <width>34</width>
                <bottom>18</bottom>
				<height>-7</height>
                <texture>colors/color_white.png</texture>
                <colordiffuse>$INFO[Skin.String(ViewDetailsHighlightTextColor)]</colordiffuse>
                <aspectratio>stretch</aspectratio>
                <animation effect="fade" start="0" end="100" delay="200" time="150">Visible</animation>
                <include condition="$PARAM[keepvisible]">KeepMenuIndicatorVisible</include>
            </control>
        </definition>
    </include>

<!-- Side Menu Sublabel Includes -->
    <include name="Bingie_Submenu_Label">
        <control type="label">
            <posx>10</posx>
            <width>340</width>
            <align>center</align>
            <font>Bold28</font>
            <height>50</height>
            <textcolor>$PARAM[textcolor]</textcolor>
            <label>$INFO[ListItem.Label]</label>
            <scroll>true</scroll>
        </control>
    </include>

    <include name="BingiePowerMenuItemLabel">
        <control type="label">
            <width>384</width>
            <height>55</height>
            <textoffsetx>50</textoffsetx>
            <align>left</align>
            <aligny>center</aligny>
            <font>Reg22</font>
            <label>$INFO[ListItem.Label]</label>
            <textcolor>$PARAM[textcolor]</textcolor>
        </control>
    </include>

    <include name="Bingie_Menu_Focus_Img">
        <control type="image">
            <visible>$PARAM[visibility]</visible>
            <width>358</width>
            <texture>colors/color_white.png</texture>
            <colordiffuse>$PARAM[colordiffuse]</colordiffuse>
        </control>
    </include>
<!-- Bingie Menu Icons -->
    <include name="Bingie_Menu_Icon">
        <control type="group">
            <include condition="$PARAM[includeAnimCond] + !Skin.HasSetting(EnhancedHome_Circular)">Bingie_Menu_Icon_Anim</include>
            <left>60</left>
            <height>100%</height>
            <top>30</top>
            <control type="image">
                <include>Bingie_Menu_Icon_Defs</include>
                <colordiffuse>$PARAM[FFc0c0c0]</colordiffuse>
            </control>
        </control>
    </include>

    <include name="Bingie_Menu_Icon_Anim">
        <animation effect="slide" start="0" end="245" time="0" condition="!$EXP[IsMainMenuOpened]">Conditional</animation>
    </include>

    <include name="Bingie_Menu_Icon_Defs">
        <width>30</width>
        <height>30</height>
        <texture background="true">$VAR[ActualIcon]</texture>
        <colordiffuse>white</colordiffuse>
		<animation end="70" effect="fade" time="0" delay="0" condition="true">Conditional</animation>
    </include>

    <include name="Bingie_Menu_Label_Defs">
        <width>205</width>
        <height>108%</height>
        <align>left</align>
        <include content="left" condition="Skin.HasSetting(DisableIconsMainMenu)">
            <param name="left" value="85" />
        </include>
        <left>150</left>
        <aligny>center</aligny>
        <font>Bold34</font>
        <label>$INFO[ListItem.Label]</label>
        <animation effect="fade" start="100" end="0" time="300" condition="!$EXP[IsMainMenuOpened]">Conditional</animation>
    </include>

    <include name="Bingie_Menu_Label">
        <control type="label">
            <include>Bingie_Menu_Label_Defs</include>
            <textcolor>$PARAM[textcolor]</textcolor>
        </control>
    </include>

    <include name="No_Circular_Left">
        <include content="left">
            <param name="left" value="bingie_no_circular_posx"/>
        </include>
    </include>

    <variable name="Bingie_Logo">
        <value condition="String.IsEmpty(Skin.String(CustomLogoImage))">bingie_logo.png</value>
        <value condition="!String.IsEmpty(Skin.String(CustomLogoImage))">$INFO[Skin.String(CustomLogoImage)]</value>
    </variable>

    <include name="Bingie_Touch_Support">
        <control type="radiobutton" id="51">
            <visible>$EXP[IsBingieViewsActive]</visible>
            <visible>![Skin.HasSetting(CompactHeader) + !Skin.String(home_header,disable)]</visible>
            <width>60</width>
            <height>60</height>
            <right>20</right>
            <top>20</top>
            <font/>
            <selected>Control.HasFocus(51)</selected>
            <texturefocus/>
            <texturenofocus/>
            <textureradioonfocus colordiffuse="$INFO[Skin.String(MainMenuFocusTextColor)]">common/menu.png</textureradioonfocus>
            <textureradioonnofocus colordiffuse="$INFO[Skin.String(MainMenuTextColor)]">common/menu.png</textureradioonnofocus>
            <textureradioofffocus colordiffuse="$INFO[Skin.String(MainMenuFocusTextColor)]">common/menu.png</textureradioofffocus>
            <textureradiooffnofocus colordiffuse="$INFO[Skin.String(MainMenuTextColor)]">common/menu.png</textureradiooffnofocus>
            <radiowidth>60</radiowidth>
            <radioheight>60</radioheight>
            <onclick condition="!String.IsEqual(Window(Home).Property(ShowViewSubMenu),show)">SetProperty(ShowViewSubMenu, show,Home)</onclick>
            <onclick condition="String.IsEqual(Window(Home).Property(ShowViewSubMenu),show)">ClearProperty(ShowViewSubMenu,Home)</onclick>
            <onclick condition="!String.IsEqual(Window(Home).Property(ShowViewSubMenu),show)">SetFocus(900)</onclick>
            <ondown>510</ondown>
        </control>
        <control type="radiobutton" id="52">
            <visible>!$EXP[IsBingieViewsActive]</visible>
            <visible>![Skin.HasSetting(CompactHeader) + !Skin.String(home_header,disable)]</visible>
            <width>60</width>
            <height>60</height>
            <right>20</right>
            <top>20</top>
            <font/>
            <selected>Control.HasFocus(52)</selected>
            <texturefocus/>
            <texturenofocus/>
            <textureradioonfocus colordiffuse="$INFO[Skin.String(MainMenuFocusTextColor)]">touchcontrols/back.png</textureradioonfocus>
            <textureradioonnofocus colordiffuse="$INFO[Skin.String(MainMenuTextColor)]">touchcontrols/back.png</textureradioonnofocus>
            <textureradioofffocus colordiffuse="$INFO[Skin.String(MainMenuFocusTextColor)]">touchcontrols/back.png</textureradioofffocus>
            <textureradiooffnofocus colordiffuse="$INFO[Skin.String(MainMenuTextColor)]">touchcontrols/back.png</textureradiooffnofocus>
            <radiowidth>60</radiowidth>
            <radioheight>60</radioheight>
            <onclick>Close</onclick>
            <ondown>510</ondown>
        </control>
    </include>

<!-- Bingie Elements / Footer on Home Transparent-->
    <include name="Bingie_Footer">
        <control type="group">
            <animation effect="slide" end="0,250" time="300" condition="$EXP[IsCurrentWidgetSpotlight]">Conditional</animation>
            <animation effect="fade" start="100" end="0" time="300"  condition="Skin.HasSetting(HideMediaFlagsTrailer) + [$EXP[IsPlayingUnrecognizedContent] | $EXP[IsCurrentWidgetSpotlight]]">Conditional</animation>
            <top>520</top>
            <width>100%</width>
<!-- Media Flags Home -->
            <control type="group">
                <visible>!$EXP[IsCurrentWidgetSpotlight]</visible>
                <top>30</top>
                <include>BingieLeftDefs</include>
                <height>50</height>
                <include condition="!Skin.HasSetting(DisableMediaCodecInfoInHome) + Skin.HasSetting(DisableBingieMoreDetails)">mediaflags</include>
            </control>
<!-- Ratings & Studio Home-->
            <control type="group">
                <include content="right" condition="$EXP[IsBingieCategoriesActive]">
                    <param name="right" value="130" />
                </include>
                <right>30</right>
                <height>50</height>
                <width>1000</width>
                <include>Bingie_RatingsAndStudio_Hor</include>
            </control>
        </control>
    </include>

    <include name="Bingie_Right_Gradient">
        <control type="image">
            <visible>Skin.HasSetting(EnhancedHome_Circular)</visible>
            <bottom>0</bottom>
            <right>0</right>
            <height>434</height>
            <width>83</width>
            <aspectratio scalediffuse="true">scale</aspectratio>
            <texture border="15" background="true">overlays/gradient_right.png</texture>
        </control>
    </include>
<!-- Left Panel Behind Icons/Over Movie Poster -->
    <include name="Bingie_Left_Gradient">
        <control type="image">
            <bottom>0</bottom>
            <left>0</left>
            <height>100%</height>
            <width>130</width>
            <aspectratio scalediffuse="true">scale</aspectratio>
            <texture border="2" background="true">diffuse/gradient_side.png</texture>
            <colordiffuse>ff000000</colordiffuse>      <!-- Added to Give Panel Color -->
		</control>
    </include>

<!-- Bingie Fixed Position Frame Elements -->
    <!-- fixed border moving with screen -->
    <include name="Bingie_Screens_Fixed_Focus_Frame_Base">
        <control type="image">
            <nested />
            <visible>$PARAM[visibility]</visible>
            <top>595</top>                                           <!-- default 645 -->
            <include condition="!Skin.HasSetting(EnhancedHome_Circular)">No_Circular_Left</include>
            <left>0</left>
            <width>$PARAM[width]</width>
            <height>$PARAM[height]</height>
            <texture background="true" border="-4">$PARAM[texture]</texture>
            <bordersize>8</bordersize>
            <colordiffuse>$VAR[ViewDetailsBorderFocusColor]</colordiffuse>
            <include>Frame_Scrolling_Fade</include>
            <include>Default_Visible_Fade</include>
        </control>
    </include>
<!-- Fixed Focus Moving Frames -->
    <include name="Bingie_Screens_Fixed_Focus_Frame">
        <include content="Bingie_Screens_Fixed_Focus_Frame_Base" condition="String.IsEqual(Skin.String(widgetstyle),landscape)">
            <param name="visibility" value="ControlGroup(77777).HasFocus() + !String.IsEmpty(Container(77777).CurrentItem) + !String.IsEmpty(ListItem.Label) + ![$EXP[IsCurrentWidgetSpotlight] | String.IsEqual(window(home).Property(widgetstyle),highlight)]"/>
            <param name="width" value="landscape_width"/>
            <param name="height" value="210"/>
            <param name="texture" value="$VAR[FixedFrameTexture]" />
        </include>
        <include content="Bingie_Screens_Fixed_Focus_Frame_Base" condition="String.IsEqual(Skin.String(widgetstyle),landscapesmall)">
            <param name="visibility" value="ControlGroup(77777).HasFocus() + !String.IsEmpty(Container(77777).CurrentItem) + !String.IsEmpty(ListItem.Label) + ![$EXP[IsCurrentWidgetSpotlight] | String.IsEqual(window(home).Property(widgetstyle),highlight)]"/>
            <param name="width" value="260" />
            <param name="height" value="148" />
            <param name="texture" value="$VAR[FixedFrameTexture]" />
        </include>
        <include content="Bingie_Screens_Fixed_Focus_Frame_Base" condition="String.IsEqual(Skin.String(widgetstyle),landscapelarge)">
            <param name="visibility" value="ControlGroup(77777).HasFocus() + !String.IsEmpty(Container(77777).CurrentItem) + !String.IsEmpty(ListItem.Label) + ![$EXP[IsCurrentWidgetSpotlight] | String.IsEqual(window(home).Property(widgetstyle),highlight)]"/>
            <param name="width" value="430" />
            <param name="height" value="260" />
            <param name="texture" value="$VAR[FixedFrameTexture]" />
        </include>
        <include content="Bingie_Screens_Fixed_Focus_Frame_Base" condition="String.IsEqual(Skin.String(widgetstyle),poster)">
            <param name="visibility" value="ControlGroup(77777).HasFocus() + !String.IsEmpty(Container(77777).CurrentItem) + !String.IsEmpty(ListItem.Label) + ![$EXP[IsCurrentWidgetSpotlight] | String.IsEqual(window(home).Property(widgetstyle),highlight)]"/>
            <param name="width" value="240" />
            <param name="height" value="340" />
            <param name="texture" value="$VAR[FixedFrameTexture]" />
        </include>
        <include content="Bingie_Screens_Fixed_Focus_Frame_Base" condition="String.IsEqual(Skin.String(widgetstyle),smallposter)">
            <param name="visibility" value="ControlGroup(77777).HasFocus() + !String.IsEmpty(Container(77777).CurrentItem) + !String.IsEmpty(ListItem.Label) + ![$EXP[IsCurrentWidgetSpotlight] | String.IsEqual(window(home).Property(widgetstyle),highlight)]"/>
            <param name="width" value="162" />
            <param name="height" value="240" />
            <param name="texture" value="$VAR[FixedFrameTexture]" />
        </include>
    </include>

    <variable name="FixedFrameTexture">
        <value condition="String.Contains(Skin.String(widgetstyle), landscape) | $EXP[IsBingieListsActive]">$INFO[Skin.String(thumbsborder_focused),bingie/border/thumb_fo_,.png]</value>
        <value condition="String.Contains(Skin.String(widgetstyle), poster)">$INFO[Skin.String(thumbsborder_focused),bingie/border/poster_fo_,.png]</value>
    </variable>

    <!-- fixed focus bottom override value -->
    <include name="Fixed_Focus_Bottom">
        <bottom>-10000</bottom>
    </include>

    <!-- fixed focus gap override value -->
    <include name="Fixed_Focus_Itemgap">
        <itemgap>0</itemgap>
    </include>

<!-- BINGIE SPOTLIGHT -->
    <!-- Bingie Spotlight Widget Position-->
    <include name="BingieSpotlightWidget">
        <control type="list" id="$PARAM[widgetid]">
            <visible>Container($PARAM[widgetid]).IsUpdating | Integer.IsGreater(Container($PARAM[widgetid]).NumItems,0)</visible>
            <orientation>horizontal</orientation>
            <height>260</height>                                             <!-- default 260 -->
            <preloaditems>1</preloaditems>
            <include content="SetFixedVerticalNavigationProps">
                <param name="widgetid" value="$PARAM[widgetid]"/>
            </include>

            <onright condition="String.IsEmpty(Window(Home).Property(spotlightinfo))">SetProperty(spotlightinfo,1,Home)</onright>
            <onleft condition="!String.IsEmpty(Window(Home).Property(spotlightinfo))">ClearProperty(spotlightinfo,Home)</onleft>
            <onleft condition="String.IsEmpty(Window(Home).Property(spotlightinfo)) + $EXP[IsPlayingUnrecognizedContent]">SetProperty(KeepPlayingPreview,1,Home)</onleft>
            <onleft condition="String.IsEmpty(Window(Home).Property(spotlightinfo))">900</onleft>
            <onleft condition="String.IsEmpty(Window(Home).Property(spotlightinfo)) + Skin.HasSetting(EnhancedHome_Circular)">noop</onleft>
            <onunfocus>ClearProperty(spotlightinfo,home)</onunfocus>
            <onback condition="$EXP[IsPlayingUnrecognizedContent]">SetProperty(KeepPlayingPreview,1,Home)</onback>
            <onback>900</onback>

            <onclick condition="!String.IsEmpty(Window(Home).Property(spotlightinfo))">Action(info)</onclick>
            <onclick condition="String.IsEmpty(Window(Home).Property(spotlightinfo)) + !String.IsEqual(Container($PARAM[widgetid]).ListItem.DBType,tvshow)">PlayMedia($ESCINFO[Container($PARAM[widgetid]).ListItem.FileNameAndPath],resume)</onclick>
            <onclick condition="String.IsEmpty(Window(Home).Property(spotlightinfo)) + !String.IsEmpty(Container($PARAM[widgetid]).ListItem.DBID) + String.IsEqual(Container($PARAM[widgetid]).ListItem.DBType,tvshow)">SetProperty(ListItem.TVShowID,$INFO[Container($PARAM[widgetid]).ListItem.DBID],Home)</onclick>
            <onclick condition="String.IsEmpty(Window(Home).Property(spotlightinfo)) + !String.IsEmpty(Container($PARAM[widgetid]).ListItem.DBID) + String.IsEqual(Container($PARAM[widgetid]).ListItem.DBType,tvshow)">SetProperty(KeepTVShowID,1,Home)</onclick>
            <onclick condition="String.IsEmpty(Window(Home).Property(spotlightinfo)) + !String.IsEmpty(Container($PARAM[widgetid]).ListItem.DBID) + String.IsEqual(Container($PARAM[widgetid]).ListItem.DBType,tvshow)">ActivateWindow(Videos,videodb://tvshows/titles/$INFO[Container($PARAM[widgetid]).ListItem.DBID]/-2/,return)</onclick>
            <onclick condition="String.IsEmpty(Window(Home).Property(spotlightinfo)) + String.IsEmpty(Container($PARAM[widgetid]).ListItem.DBID) + String.IsEqual(Container($PARAM[widgetid]).ListItem.DBType,tvshow)">ActivateWindow(Videos,$ESCINFO[Container($PARAM[widgetid]).ListItem.FileNameAndPath],return)</onclick>

            <itemlayout width="1920" height="210">
            </itemlayout>
            <focusedlayout width="1920" height="210">
                <include content="HiddenWidgetButton">
                    <param name="widgetstyle" value="spotlight" />
                    <param name="widgetid" value="$PARAM[widgetid]" />
                    <param name="widget" value="Spotlight" />
                </include>
            </focusedlayout>
            <content target="videos" limit="1">$VAR[BingieHomeSpotlightWidgetContent]</content>
        </control>
    </include>

    <include name="SpotlightLoadingSpinner">
        <param name="spotlightid" default="1508" />
        <definition>
            <control type="grouplist">
                <visible>$PARAM[visibility]</visible>
                <visible>Container($PARAM[spotlightid]).IsUpdating + Integer.IsEqual(Container($PARAM[spotlightid]).NumItems,0)</visible>
                <orientation>horizontal</orientation>
                <include>BingieLeftDefs</include>
                <top>23</top>
                <width>500</width>
                <height>60</height>
                <itemgap>20</itemgap>
                <control type="multiimage">
                    <width>25</width>
                    <height>25</height>
                    <aspectratio>keep</aspectratio>
                    <imagepath>$VAR[WidgetBusySpinnerPath]</imagepath>
                    <timeperimage>85</timeperimage>
                    <colordiffuse>$INFO[Skin.String(WidgetSpinnerTexture.Color)]</colordiffuse>
                    <fadetime>0</fadetime>
                </control>
                <control type="label">
                    <height>60</height>
                    <aligny>top</aligny>
                    <width>420</width>
                    <label>[B]$LOCALIZE[31185]...[/B]</label>
                    <font>Light22</font>
                    <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                </control>
            </control>
        </definition>
    </include>

<!-- Spotlight Buttons Bingie Home-->
    <include name="Spotlight_Buttons">
        <param name="spotlightid" default="1508"/>
        <param name="top" default="0" />
        <definition>
            <control type="grouplist">
                <visible>Control.IsVisible($PARAM[spotlightid]) + Integer.IsGreater(Container($PARAM[spotlightid]).NumItems,0)</visible>
                <visible>Control.HasFocus($PARAM[spotlightid]) | String.IsEqual(Container(77777).Position,0)</visible>
                <orientation>horizontal</orientation>
                <top>$PARAM[top]</top>
                <width>800</width>
                <height>70</height>
                <itemgap>15</itemgap>
                <control type="radiobutton">
<!-- PLAY Button Panel width -->                    
					<description>Play</description>
                    <height>100%</height>
                    <width>230</width>
                    <textoffsetx>95</textoffsetx>
                    <textwidth>155</textwidth>
                    <align>left</align>
                    <textcolor>$VAR[SpotlightPlayTextButtonColor]</textcolor>
                    <texturenofocus colordiffuse="$VAR[SpotlightPlayButtonColor]" border="5">diffuse/panel.png</texturenofocus>
                    <textureradiooff colordiffuse="$VAR[SpotlightPlayTextButtonColor]">dialogs/videoinfo/info/play.png</textureradiooff>
                    <radioposx>55</radioposx>
                    <radiowidth>25</radiowidth>
                    <radioheight>35</radioheight>
                    <font>Bold28</font>
                    <label>[CAPITALIZE][B]$LOCALIZE[208][/B][/CAPITALIZE]</label>
                </control>
                <control type="button">
                    <width>230</width>
                    <height>100%</height>
                    <align>center</align>
                    <textcolor>$VAR[SpotlightInfoTextButtonColor]</textcolor>
                    <texturenofocus colordiffuse="$VAR[SpotlightInfoButtonColor]" border="5">diffuse/panel.png</texturenofocus>
                    <font>Bold28</font>                <!---to match line 1644--->
                    <label>[B]$LOCALIZE[31838][/B]</label>
                </control>
            </control>
        </definition>
    </include>

<!-- Play Button Spotlight Color -->
    <variable name="SpotlightPlayButtonColor">
        <value condition="!String.IsEmpty(Window(Home).Property(spotlightinfo))">$INFO[Skin.String(BingieDetailsFlagColor)]</value>
        <value>ffffffff</value>
    </variable>
    <variable name="SpotlightInfoButtonColor">
        <value condition="!String.IsEmpty(Window(Home).Property(spotlightinfo))">ffffffff</value>
        <value>$INFO[Skin.String(BingieDetailsFlagColor)]</value>
    </variable>

    <variable name="SpotlightPlayTextButtonColor">
        <value condition="!String.IsEmpty(Window(Home).Property(spotlightinfo))">$INFO[Skin.String(ViewDetailsTextColor)]</value>
        <value>ff181818</value>
    </variable>
    <variable name="SpotlightInfoTextButtonColor">
        <value condition="String.IsEmpty(Window(Home).Property(spotlightinfo))">$INFO[Skin.String(ViewDetailsTextColor)]</value>
        <value>ff181818</value>
    </variable>

    <!-- Bingie Spotlight Content -->
    <variable name="BingieHomeSpotlightWidgetContent">
        <!-- home -->
        <!-- custom home spotlight -->
        <value condition="Window.IsActive(Home) + !String.IsEmpty(Skin.String(spotlighthome.path))">$INFO[Skin.String(spotlighthome.path)]</value>
        <value condition="Window.IsActive(Home) + Skin.HasSetting(SimilarContentSpotlight)">plugin://script.skin.helper.widgets/?action=similar&amp;mediatype=media&amp;limit=5&amp;reload=$INFO[Window(Home).Property(widgetreload2)]</value>
        <value condition="Window.IsActive(Home)">$VAR[SpotlightDefaultContent]</value>
        <!-- movies hub -->
        <value condition="Window.IsActive(1111) + !String.IsEmpty(Skin.String(spotlightmovies.path))">$INFO[Skin.String(spotlightmovies.path)]</value>
        <value condition="Window.IsActive(1111) + Skin.String(spotlightmovies.label, default)">plugin://script.skin.helper.widgets/?action=newrelease&amp;mediatype=movies&amp;limit=3&amp;reload=$INFO[Window(Home).Property(widgetreload2)]</value>

        <value condition="Window.IsActive(1111)"/>
        <!-- tvshows hub -->
        <value condition="Window.IsActive(1110) + !String.IsEmpty(Skin.String(spotlighttvshows.path))">$INFO[Skin.String(spotlighttvshows.path)]</value>
        <value condition="Window.IsActive(1110) + Skin.String(spotlighttvshows.label, default)">plugin://script.skin.helper.widgets/?action=newrelease&amp;mediatype=tvshows&amp;limit=3&amp;reload=$INFO[Window(Home).Property(widgetreload2)]</value>
        <value condition="Window.IsActive(1110)"/>
        <!-- new hub -->
        <value condition="Window.IsActive(1112) + !String.IsEmpty(Skin.String(spotlightnew.path))">$INFO[Skin.String(spotlightnew.path)]</value>
        <value condition="Window.IsActive(1112) + Skin.String(spotlightnew.label, default)">plugin://script.skin.helper.widgets/?action=newrelease&amp;mediatype=media&amp;limit=3&amp;reload=$INFO[Window(Home).Property(widgetreload2)]</value>
        <value condition="Window.IsActive(1112)"/>
        <!-- my hub -->
        <value condition="Window.IsActive(1113) + !String.IsEmpty(Skin.String(spotlightmyhub.path))">$INFO[Skin.String(spotlightmyhub.path)]</value>
        <value condition="Window.IsActive(1113)"/>
        <!-- pvr hub -->
        <value condition="Window.IsActive(1116) + !String.IsEmpty(Skin.String(spotlightmyhub.path))">$INFO[Skin.String(spotlightpvr.path)]</value>
        <value condition="Window.IsActive(1116)"/>
        <!-- container screens -->
        <value condition="$EXP[IsBingieListsActive]"/>
    </variable>

    <!-- Home Spotlight default content -->
    <variable name="SpotlightDefaultContent">
        <value condition="Integer.IsGreater(Window(Home).Property(Random),20) + Library.HasContent(movies)">special://skin/extras/widgetplaylists/recommendedmovies.xsp</value>
        <value condition="[!Integer.IsGreater(Window(Home).Property(Random),20) | !Library.HasContent(movies)] + Library.HasContent(tvshows)">special://skin/extras/widgetplaylists/recommendedtvshows.xsp</value>
    </variable>

<!-- Spotlight Image Main Home - USE LATER FOR TEST -->
    <!--<include name="BingieSpotlightCornerImage">
        <param name="top" default="0"/>
        <param name="right" default="-2"/>
        <param name="width" default="1688"/>
        <param name="height" default="950"/>
        <definition>
            <control type="image">
                <nested />
				<visible>$PARAM[visibility]</visible>							 
                <top>0</top>
                <right>-70</right>
                <width>1600</width>
                <height>800</height>-->

<!-- Spotlight Image Main Home -->
    <include name="BingieSpotlightCornerImage">
        <param name="top" default="0"/>
        <param name="right" default="-320"/>
        <param name="width" default="1800"/>
        <param name="height" default="900"/>
        <definition>
            <control type="image">
                <nested />
                <visible>$PARAM[visibility]</visible>
                <top>$PARAM[top]</top>
                <right>$PARAM[right]</right>
                <width>$PARAM[width]</width>
                <height>$PARAM[height]</height>
                <texture background="true" diffuse="bingie/bingie_default_spotlight_diffuse.png">$PARAM[image]</texture>
                <fadetime>550</fadetime>
                <aspectratio scalediffuse="true" aligny="top" align="right">scale</aspectratio>
                <animation effect="fade" end="0" time="500">Hidden</animation>
                <animation effect="fade" start="0" end="100" time="1200">Visible</animation>
            </control>
        </definition>
    </include>

<!-- CLEARLOGO - Home Screen Widgets - Info/Text/Clearlogo -->
    <include name="Bingie_Headline_Item">
        <param name="genre_adjust" default="true" />
        <definition>
            <control type="image" id="$PARAM[id]5">
                <height>250</height>                                        <!-- default - 186 -->
                <width>0</width>
                <align>left</align>
                <fadetime>350</fadetime>
                <aspectratio align="left" aligny="center">keep</aspectratio>
                <texture background="true" fallback="colors/color_transparent.png">$PARAM[image]</texture>
            </control>
<!-- Movie Title with no Clearlogo -->            
			<control type="textbox" id="$PARAM[id]6">
                <visible>String.EndsWith(Control.GetLabel($PARAM[id]5),color_transparent.png)</visible>
                <top>-143</top>
                <height max="180">auto</height>
                <width max="1100">auto</width>
                <font>Reg70</font>
                <align>left</align>
                <aligny>center</aligny>
                <shadowcolor>$INFO[Skin.String(ViewDetailsTextShadowColor)]</shadowcolor>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$PARAM[text]</label>
                <include condition="$PARAM[genre_adjust]">Bingie_TextTitle_Adjust_Genre_Anim</include>
            </control>
        </definition>
    </include>

    <!-- Trailer Window -->
    <include name="Preview_Window">
        <param name="top" default="0"/>
        <param name="right" default="0"/>
        <param name="width" default="1292"/>
        <param name="height" default="720"/>
        <param name="overlaywidth" default="1410"/>
        <param name="overlayheight" default="790"/>
        <param name="videowindowVisibility" default="!$EXP[IsRecognizedVideoContent]" />
        <param name="isFullscreen" default="false" />
        <param name="overlay_animation" default="Bingie_Preview_Window_Overlay_Anim" />
        <definition>
            <control type="group" id="$PARAM[id]">
                <visible>$PARAM[visibility]</visible>
                <top>$PARAM[top]</top>
                <right>$PARAM[right]</right>
                <width>$PARAM[width]</width>
                <height>$PARAM[height]</height>
                <control type="videowindow">
                    <visible>$PARAM[videowindowVisibility]</visible>
                </control>
                <control type="image">
                    <visible>!$PARAM[isFullscreen]</visible>
                    <texture background="true" colordiffuse="$VAR[BingiePanelColor]" border="20">overlays/bingie_corner.png</texture>
                </control>
            </control>
            <control type="image">
                <visible>Control.IsVisible($PARAM[id])</visible>
                <top>$PARAM[top]</top>
                <right>$PARAM[right]</right>
                <width>$PARAM[overlaywidth]</width>
                <height>$PARAM[overlayheight]</height>
                <aligny>top</aligny>
                <aspectratio>scale</aspectratio>
                <colordiffuse>$VAR[BingiePanelColor]</colordiffuse>
                <texture background="true" border="15">diffuse/bgpanel.png</texture>
                <include>$PARAM[overlay_animation]</include>
            </control>
        </definition>
    </include>
<!-- MPAA Flag on Spotlight Rightside of Window -->
    <include name="Spotlight_MPAA_Flag_Object">
        <param name="right" default="-160" />
        <param name="top" default="690" />                           <!-- Default --675-- -->
        <param name="visibility" default="true" />
        <definition>
            <control type="group">
                <visible>!String.IsEmpty(Control.GetLabel($PARAM[id]))</visible>
                <visible>$PARAM[visibility]</visible>
                <right>$PARAM[right]</right>
                <top>$PARAM[top]</top>
                <height>55</height>
                <width>160</width>
                <animation type="VisibleChange">
                    <effect type="slide" start="0" end="-160" delay="2000" time="400"/>
                    <effect type="fade" start="0" end="100" delay="2000" time="400"/>
                </animation>
                <control type="image">
                    <height>55</height>
                    <width>160</width>
                    <texture background="true" colordiffuse="9a2a2a2a">colors/color_trans_40%white.png</texture>
                </control>
<!-- White Line on Right Home Screen -->
				<control type="label">
                    <left>-5</left>                     <!-- Adjusted to match Netflix -->
                    <height>45</height>
                    <width>25</width>
                    <align>left</align>
                    <aligny>center</aligny>
                    <font>light60</font>
                    <textcolor>d9ffffff</textcolor>               <!-- Default - white -->
                    <label>[B]|[/B]</label>
                </control>
<!-- Text inside of Box Right Home Screen -->                
				<control type="label" id="$PARAM[id]">
                    <left>30</left>
                    <height>55</height>
                    <width>130</width>
                    <align>left</align>
                    <font>Bold28</font>
                    <textcolor>d9ffffff</textcolor>               <!-- Default - white -->
                    <label>$VAR[GetMPAA]</label>
                </control>
            </control>
        </definition>
    </include>

    <include name="Bingie_Base_BG">
        <control type="image">
            <visible>$PARAM[visibility]</visible>
            <include>FullscreenDimensions</include>
            <texture background="true" colordiffuse="$VAR[BingiePanelColor]">colors/color_white.png</texture>
        </control>
    </include>

    <!-- Bingie Basic Inc/Vars -->
<!-- Bingie Panel Color - Home Background Color-->
    <variable name="BingiePanelColor">
        <value condition="!String.IsEmpty(Skin.String(ViewDetailsPanelColor.base))">$INFO[Skin.String(ViewDetailsPanelColor.base)]</value>
        <value>ff000000</value>                           <!-- Default Value ff0a0a0a -->
    </variable>

    <!-- Bingie Plot Textcolor -->
    <variable name="BingiePlotTextColor">
        <value condition="$EXP[IsCurrentWidgetSpotlight]">$INFO[Skin.String(ViewDetailsTextColor)]</value>
        <value>ffd0d0d0</value>
	</variable>

    <variable name="BingieMenuPanelColor">
        <value condition="!$EXP[IsMainMenuOpened] + !Skin.HasSetting(EnhancedHome_Circular)">$INFO[Skin.String(BingieSlimMenuPanelColor)]</value>
        <value>ff000000</value>   <!--<value>$INFO[Skin.String(MainMenuPanelColor)]</value>-->
	</variable>

    <include name="Alt_Bingie_Plot_Height">
        <height min="50" max="200">auto</height>
    </include>

    <include name="Title_Height_No_Clearlogo">
        <top>43</top>
    </include>

    <include name="NoCircularPosX">
        <posx>bingie_no_circular_posx</posx>
    </include>

    <!-- Disabled Spotlight Widgets Height -->
    <include name="Bingie_Alt_Height_No_Spotlight">
        <top>0</top>
        <height>100%</height>
    </include>

    <!-- Bingie Views Includes -->
    <include name="Bingie_Main_Spotlight_Section">
        <!-- spotlight section -->
        <include content="Bingie_Base_BG">
            <param name="visibility" value="!$EXP[IsPlayingRecognizedContent]" />
        </include>
        <include content="Preview_Window">
            <param name="id" value="$PARAM[id]01" />
            <param name="visibility" value="Player.HasVideo + !String.IsEmpty(Window(Home).Property(TrailerPlaying)) + [Skin.HasSetting(DetailsAutoTrailer) | Skin.HasSetting(PlayTrailerOnUp)]" />
        </include>
        <control type="group">
            <width>1920</width>
            <height>600</height>

            <include content="BingieSpotlightCornerImage">
                <param name="visibility" value="!$EXP[IsPlayingRecognizedContent] + !Control.IsVisible($PARAM[id]01)" />
                <param name="image" value="$VAR[bingieThumb]" />
            </include>

            <!-- bingie details -->
            <control type="grouplist">
                <width>1500</width>
                <include>BingieLeftDefs</include>
                <top>22</top>
                <orientation>vertical</orientation>
                <usecontrolcoords>true</usecontrolcoords>
                <itemgap>10</itemgap>
                <!-- adjust for episode info -->
                <animation effect="slide" start="0" end="0,75" time="0" condition="Container.Content(episodes)">Conditional</animation>

                <include content="Bingie_Headline_Item">
                    <param name="id" value="$PARAM[id]0" />
                    <param name="image" value="$VAR[BingieInfoClearlogo]" />
                    <param name="text" value="$VAR[BingieMainFallbackTitle]" />
                </include>

                <!-- spotlight row details -->
                <control type="group">
                    <width>1000</width>
                    <height>40</height>
                    <include>Default_Visible_Fade</include>
                    <include>SpotlightRowDetails</include>
                </control>

<!-- Bingie Sublabel (Tagline/Watch Bingie library View) -->
                <control type="label" id="823">
                    <visible>!Container.Content(episodes)</visible>
                    <visible>!String.IsEmpty(Control.GetLabel(823))</visible>
                    <top>40</top>
					<height>0</height>
                    <width>820</width>
                    <font>Reg28</font>
                    <align>left</align>
                    <aligny>center</aligny>
                    <textcolor>$INFO[Skin.String(BingieSubLabelTextColor)]</textcolor>
                    <label>$VAR[BingieSublabel]</label>
                    <include>Default_Visible_Fade</include>
                </control>

                <!-- episode info -->
                <control type="grouplist">
                    <visible>Container.Content(seasons) | Container.Content(episodes)</visible>
                    <orientation>vertical</orientation>
                    <height>125</height>
                    <width>1000</width>
                    <include>Default_Visible_Fade</include>
                    <!-- season x episode x & title -->
                    <control type="label">
                        <height>85</height>
                        <width>1000</width>
                        <font>Reg40</font>
                        <align>left</align>
                        <aligny>center</aligny>
                        <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                        <label>$VAR[BingieMainEpisodeInfoLabel]</label>
                        <animation effect="zoom" end="115" condition="Container.Content(seasons)">Conditional</animation>
                    </control>
                    <!-- progress bar & continue label -->
                    <control type="group">
                        <visible>Integer.IsGreater(ListItem.PercentPlayed,0)</visible>
                        <width>1000</width>
                        <height>40</height>
                        <aligny>center</aligny>
                        <!-- Progress bar -->
                        <control type="progress">
                            <description>progress bar</description>
                            <top>11</top>
                            <width>150</width>
                            <height>8</height>
                            <texturebg colordiffuse="cc515151" border="2">colors/color_white.png</texturebg>
                            <lefttexture/>
                            <midtexture colordiffuse="$INFO[Skin.String(OSDProgressBarColor)]" border="2">colors/color_white.png</midtexture>
                            <righttexture/>
                            <info>ListItem.PercentPlayed</info>
                        </control>
                        <!--continue watching -->
                        <control type="label">
                            <left>175</left>
                            <height>30</height>
                            <width>600</width>
                            <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                            <label>[CAPITALIZE]$LOCALIZE[31535][/CAPITALIZE]</label>
                        </control>
                    </control>
                </control>

<!-- Plot Text on Bingie Library view -->
                <control type="textbox">
                    <visible>!Container.Content(seasons)</visible>
                    <height min="50" max="74">auto</height>
                    <top>25</top>
					<width>820</width>
                    <textcolor>$VAR[BingiePlotTextColor]</textcolor>
                    <align>left</align>                                      <!-- justify -->
                    <font>Reg28</font>
                    <label>$VAR[ViewsPlotWithOutline]</label>
                    <include>Default_Visible_Fade</include>
                </control>

                <!-- additional info -->
                <include content="Bingie_Additional_Info">
                    <param name="visibility" value="!Skin.HasSetting(DisableBingieMoreDetailsInViews) + [Container.Content(movies) | Container.Content(tvshows)]" />
                </include>
            </control>

            <control type="group">
                <visible>!Skin.HasSetting(NoFooterBar)</visible>
                <animation effect="fade" start="100" end="0" time="600"  condition="Control.IsVisible($PARAM[id]01) + Skin.HasSetting(HideMediaFlagsTrailer)">Conditional</animation>
                <top>550</top>
                <width>100%</width>
                <!-- media flags -->
                <control type="group">
                    <top>30</top>
                    <include>BingieLeftDefs</include>
                    <height>50</height>
                    <include condition="Skin.HasSetting(DisableBingieMoreDetailsInViews)">mediaflags</include>
                </control>
                <!-- ratings & studio -->
                <control type="group">
                    <right>130</right>
                    <height>90</height>
                    <width>1000</width>
                    <include>Bingie_Main_RatingsAndStudio_Hor</include>
                </control>
            </control>
        </control>
    </include>

    <include name="Bingie_Main_View_Fixed_Frame">
        <param name="visibility" default="true" />
        <param name="isHorizontal" default="false" />
        <definition>
            <control type="image">
                <nested />
                <visible>$PARAM[visibility]</visible>
                <visible>Integer.IsGreater(Container($PARAM[containerid]).NumItems, 0) + Control.HasFocus($PARAM[containerid])</visible>
                <top>$PARAM[top]</top>
                <width>$PARAM[width]</width>
                <height>$PARAM[height]</height>
                <texture background="true" border="-4">$PARAM[texture]</texture>
                <colordiffuse>$VAR[ViewDetailsBorderFocusColor]</colordiffuse>
                <bordersize>8</bordersize>
                <include>Default_Visible_Fade</include>
                <animation effect="slide" end="$PARAM[xAxisAnim],0" time="150" condition="Integer.IsGreater(Container($PARAM[containerid]).Column, 0)">Conditional</animation>
                <animation effect="slide" end="$PARAM[xAxisAnim],0" time="150" condition="Integer.IsGreater(Container($PARAM[containerid]).Column, 1)">Conditional</animation>
                <animation effect="slide" end="$PARAM[xAxisAnim],0" time="150" condition="Integer.IsGreater(Container($PARAM[containerid]).Column, 2)">Conditional</animation>
                <animation effect="slide" end="$PARAM[xAxisAnim],0" time="150" condition="Integer.IsGreater(Container($PARAM[containerid]).Column, 3)">Conditional</animation>
                <animation effect="slide" end="$PARAM[xAxisAnim],0" time="150" condition="Integer.IsGreater(Container($PARAM[containerid]).Column, 4)">Conditional</animation>
                <animation effect="slide" end="$PARAM[xAxisAnim],0" time="150" condition="Integer.IsGreater(Container($PARAM[containerid]).Column, 5)">Conditional</animation>
                <animation effect="slide" end="0,$PARAM[yAxisAnim]" time="200" condition="$PARAM[isHorizontal] + Integer.IsGreater(Container($PARAM[containerid]).Row, 0)">Conditional</animation>
            </control>
        </definition>
    </include>

    <include name="Bingie_Main_RatingsAndStudio_Hor">
        <control type="grouplist">
            <orientation>horizontal</orientation>
            <height>90</height>
            <itemgap>15</itemgap>
            <align>right</align>
            <include condition="Skin.HasSetting(EnableMonochromeRatingInFooter)">Rating_Monochrome_Hor</include>
            <include condition="!Skin.HasSetting(EnableMonochromeRatingInFooter)">Rating_Color_Hor</include>
            <include condition="Skin.HasSetting(EnableStudioLogo)">StudioLogo</include>
        </control>
    </include>

    <!-- Content header -->
    <variable name="BingieMainContentHeader">
        <!-- built-in -->
        <value condition="String.IsEqual(Container.FolderPath, videodb://tvshows/titles/)">[CAPITALIZE]$LOCALIZE[36903][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, videodb://movies/titles/)">[CAPITALIZE]$LOCALIZE[36901][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, videodb://recentlyaddedmovies/)">[CAPITALIZE]$LOCALIZE[20386][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, videodb://recentlyaddedepisodes/)">[CAPITALIZE]$LOCALIZE[20387][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, videodb://inprogresstvshows)">[CAPITALIZE]$LOCALIZE[626][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, videodb://tvshows/genres/)">[CAPITALIZE]$LOCALIZE[36903]$LOCALIZE[135, - ,][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, videodb://movies/genres/)">[CAPITALIZE]$LOCALIZE[36901]$LOCALIZE[135, - ,][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, videodb://movies/sets/)">[CAPITALIZE]$LOCALIZE[20434][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, special://skin/playlists/topratedshows.xsp)">[CAPITALIZE]$LOCALIZE[31098][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, special://skin/playlists/topratedmovies.xsp)">[CAPITALIZE]$LOCALIZE[31532][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, special://skin/extras/widgetplaylists/inprogressmovies.xsp)">[CAPITALIZE]$LOCALIZE[31035][/CAPITALIZE]</value>
        <value condition="String.IsEqual(Container.FolderPath, special://skin/extras/widgetplaylists/unwatchedmovies.xsp)">[CAPITALIZE]$LOCALIZE[16101][/CAPITALIZE]</value>
        <!-- skin helper widgets -->
        <value condition="String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=inprogress&amp;mediatype=movies)">[CAPITALIZE]$ADDON[script.skin.helper.widgets 32028][/CAPITALIZE]</value>
        <value condition="String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=unwatched&amp;mediatype=movies)">[CAPITALIZE]$ADDON[script.skin.helper.widgets 32066][/CAPITALIZE]</value>
        <value condition="String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=recent&amp;mediatype=tvshows)">[CAPITALIZE]$ADDON[script.skin.helper.widgets 32045][/CAPITALIZE]</value>
        <value condition="String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=nextaired)">[CAPITALIZE]$ADDON[script.skin.helper.widgets 32043][/CAPITALIZE]</value>
        <value condition="String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=newrelease&amp;mediatype=media)">[CAPITALIZE]$ADDON[script.skin.helper.widgets 32087][/CAPITALIZE]</value>
        <value condition="String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=recentshowsandmovies&amp;mediatype=media)">[CAPITALIZE]$ADDON[script.skin.helper.widgets 32078][/CAPITALIZE]</value>
        <value condition="String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=popular&amp;mediatype=media)">[CAPITALIZE]$ADDON[script.skin.helper.widgets 32090][/CAPITALIZE]</value>
        <value condition="String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=toprated&amp;mediatype=movies)">[CAPITALIZE]$ADDON[script.skin.helper.widgets 32083][/CAPITALIZE]</value>
        <value condition="String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=toprated&amp;mediatype=tvshows)">[CAPITALIZE]$ADDON[script.skin.helper.widgets 32097][/CAPITALIZE]</value>
        <value condition="String.Contains(Container.FolderPath, genre) | String.StartsWith(Container.FolderPath, plugin://script.skin.helper.widgets/?action=forgenre&amp;mediatype=media)">$INFO[Window(Home).Property(ListItem.Label)]</value>
        <!-- to be continued -->
    </variable>

    <!-- season/episode sublabel -->
    <variable name="BingieMainEpisodeInfoLabel">
        <value condition="Container.Content(seasons) + !String.IsEmpty(ListItem.Season)">[B][CAPITALIZE]$INFO[ListItem.Season,$LOCALIZE[36904] ,][/CAPITALIZE][/B][CR]$VAR[BingieMainSeasonTotalEpisodesInfoLabel]</value>
        <value condition="Container.Content(seasons) + String.IsEmpty(ListItem.Season)">$VAR[BingieMainSeasonTotalEpisodesInfoLabel]</value>
        <value condition="Container.Content(episodes)">[B][CAPITALIZE]$INFO[ListItem.Season,$LOCALIZE[36904] ,]$INFO[ListItem.Episode, $LOCALIZE[36906] ,][/CAPITALIZE][/B][CR]$INFO[ListItem.Title]</value>
    </variable>

    <!-- season total episodes / watched info -->
    <variable name="BingieMainSeasonTotalEpisodesInfoLabel">
        <value condition="Container.Content(seasons) + !String.IsEmpty(ListItem.Property(TotalEpisodes)) + Integer.IsGreater(ListItem.Property(UnWatchedEpisodes),0) + !String.IsEqual(ListItem.Property(UnWatchedEpisodes),ListItem.Property(TotalEpisodes))">$INFO[ListItem.Property(TotalEpisodes),, $LOCALIZE[20360] ]$INFO[ListItem.Property(UnWatchedEpisodes),(, $LOCALIZE[16101])]</value>
        <value condition="Container.Content(seasons) + !String.IsEmpty(ListItem.Property(TotalEpisodes))">$INFO[ListItem.Property(TotalEpisodes),, $LOCALIZE[20360]]</value>
    </variable>

    <!-- title text fallback -->
    <variable name="BingieMainFallbackTitle">
        <value condition="[Container.Content(episodes) | Container.Content(seasons)] + !String.IsEmpty(ListItem.TVShowTitle)">[B]$INFO[ListItem.TVShowTitle][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Title)">[B]$INFO[ListItem.Title][/B]</value>
        <value>[B]$INFO[ListItem.Label][/B]</value>
    </variable>

    <!-- Jedi mind tricks inventory -->

    <!-- Get NextUp Episode number and subtracts one for playoffset (play from beginning workaround) -->
    <variable name="NextUpEpisodeMinusOne">
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,1)">0</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,2)">1</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,3)">2</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,4)">3</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,5)">4</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,6)">5</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,7)">6</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,8)">7</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,9)">8</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,10)">9</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,11)">10</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,12)">11</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,13)">12</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,14)">13</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,15)">14</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,16)">15</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,17)">16</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,18)">17</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,19)">18</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,20)">19</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,21)">20</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,22)">21</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,23)">22</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,24)">23</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,25)">24</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,26)">25</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,27)">26</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,28)">27</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,29)">28</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,30)">29</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,31)">30</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,32)">31</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,33)">32</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,34)">33</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,35)">34</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,36)">35</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,37)">36</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,38)">37</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,39)">38</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,40)">39</value>
        <value>-1</value>
    </variable>

    <!-- painful way to get percentage based rating
    Note: intentionally disregarding 0 and 100 -->
    <variable name="RatingDecimalToPercentage">
        <!-- user rating -->
        <value condition="!String.IsEmpty(ListItem.UserRating)">$VAR[RatingDecimalToPercentageListItemUserRating]</value>
        <value condition="!String.IsEmpty(ListItem.Rating)">$VAR[RatingDecimalToPercentageListItemRating]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.UserRating))">$VAR[RatingDecimalToPercentageHomeListItemUserRating]</value>
        <value condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.Rating))">$VAR[RatingDecimalToPercentageHomeListItemRating]</value>
    </variable>

    <!-- ListItem.UserRating -->
    <variable name="RatingDecimalToPercentageListItemUserRating">
        <value condition="String.IsEqual(ListItem.UserRating,0)"/>
        <value condition="String.IsEqual(ListItem.UserRating,0.0)"/>
        <value condition="String.IsEqual(ListItem.UserRating,0.1)">1</value>
        <value condition="String.IsEqual(ListItem.UserRating,0.2)">2</value>
        <value condition="String.IsEqual(ListItem.UserRating,0.3)">3</value>
        <value condition="String.IsEqual(ListItem.UserRating,0.4)">4</value>
        <value condition="String.IsEqual(ListItem.UserRating,0.5)">5</value>
        <value condition="String.IsEqual(ListItem.UserRating,0.6)">6</value>
        <value condition="String.IsEqual(ListItem.UserRating,0.7)">7</value>
        <value condition="String.IsEqual(ListItem.UserRating,0.8)">8</value>
        <value condition="String.IsEqual(ListItem.UserRating,0.9)">9</value>
        <value condition="String.IsEqual(ListItem.UserRating,1)">10</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.0)">10</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.1)">11</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.2)">12</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.3)">13</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.4)">14</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.5)">15</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.6)">16</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.7)">17</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.8)">18</value>
        <value condition="String.IsEqual(ListItem.UserRating,1.9)">19</value>
        <value condition="String.IsEqual(ListItem.UserRating,2)">20</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.0)">20</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.1)">21</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.2)">22</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.3)">23</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.4)">24</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.5)">25</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.6)">26</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.7)">27</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.8)">28</value>
        <value condition="String.IsEqual(ListItem.UserRating,2.9)">29</value>
        <value condition="String.IsEqual(ListItem.UserRating,3)">30</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.0)">30</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.1)">31</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.2)">32</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.3)">33</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.4)">34</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.5)">35</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.6)">36</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.7)">37</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.8)">38</value>
        <value condition="String.IsEqual(ListItem.UserRating,3.9)">39</value>
        <value condition="String.IsEqual(ListItem.UserRating,4)">40</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.0)">40</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.1)">41</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.2)">42</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.3)">43</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.4)">44</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.5)">45</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.6)">46</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.7)">47</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.8)">48</value>
        <value condition="String.IsEqual(ListItem.UserRating,4.9)">49</value>
        <value condition="String.IsEqual(ListItem.UserRating,5)">50</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.0)">50</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.1)">51</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.2)">52</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.3)">53</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.4)">54</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.5)">55</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.6)">56</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.7)">57</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.8)">58</value>
        <value condition="String.IsEqual(ListItem.UserRating,5.9)">59</value>
        <value condition="String.IsEqual(ListItem.UserRating,6)">60</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.0)">60</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.1)">61</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.2)">62</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.3)">63</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.4)">64</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.5)">65</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.6)">66</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.7)">67</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.8)">68</value>
        <value condition="String.IsEqual(ListItem.UserRating,6.9)">69</value>
        <value condition="String.IsEqual(ListItem.UserRating,7)">70</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.0)">70</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.1)">71</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.2)">72</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.3)">73</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.4)">74</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.5)">75</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.6)">76</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.7)">77</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.8)">78</value>
        <value condition="String.IsEqual(ListItem.UserRating,7.9)">79</value>
        <value condition="String.IsEqual(ListItem.UserRating,8)">80</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.0)">80</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.1)">81</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.2)">82</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.3)">83</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.4)">84</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.5)">85</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.6)">86</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.7)">87</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.8)">88</value>
        <value condition="String.IsEqual(ListItem.UserRating,8.9)">89</value>
        <value condition="String.IsEqual(ListItem.UserRating,9)">90</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.0)">90</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.1)">91</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.2)">92</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.3)">93</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.4)">94</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.5)">95</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.6)">96</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.7)">97</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.8)">98</value>
        <value condition="String.IsEqual(ListItem.UserRating,9.9)">99</value>
        <value condition="String.IsEqual(ListItem.UserRating,10)"/>
        <value condition="String.IsEqual(ListItem.UserRating,10.0)"/>
    </variable>

    <!-- Window(Home).Property(ListItem.UserRating) -->
    <variable name="RatingDecimalToPercentageHomeListItemUserRating">
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0)"/>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.0)"/>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.1)">1</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.2)">2</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.3)">3</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.4)">4</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.5)">5</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.6)">6</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.7)">7</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.8)">8</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),0.9)">9</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1)">10</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.0)">10</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.1)">11</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.2)">12</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.3)">13</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.4)">14</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.5)">15</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.6)">16</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.7)">17</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.8)">18</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),1.9)">19</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2)">20</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.0)">20</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.1)">21</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.2)">22</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.3)">23</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.4)">24</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.5)">25</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.6)">26</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.7)">27</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.8)">28</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),2.9)">29</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3)">30</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.0)">30</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.1)">31</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.2)">32</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.3)">33</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.4)">34</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.5)">35</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.6)">36</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.7)">37</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.8)">38</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),3.9)">39</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4)">40</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.0)">40</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.1)">41</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.2)">42</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.3)">43</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.4)">44</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.5)">45</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.6)">46</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.7)">47</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.8)">48</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),4.9)">49</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5)">50</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.0)">50</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.1)">51</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.2)">52</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.3)">53</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.4)">54</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.5)">55</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.6)">56</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.7)">57</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.8)">58</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),5.9)">59</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6)">60</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.0)">60</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.1)">61</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.2)">62</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.3)">63</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.4)">64</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.5)">65</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.6)">66</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.7)">67</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.8)">68</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),6.9)">69</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7)">70</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.0)">70</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.1)">71</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.2)">72</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.3)">73</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.4)">74</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.5)">75</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.6)">76</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.7)">77</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.8)">78</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),7.9)">79</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8)">80</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.0)">80</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.1)">81</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.2)">82</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.3)">83</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.4)">84</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.5)">85</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.6)">86</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.7)">87</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.8)">88</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),8.9)">89</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9)">90</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.0)">90</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.1)">91</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.2)">92</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.3)">93</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.4)">94</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.5)">95</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.6)">96</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.7)">97</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.8)">98</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),9.9)">99</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),10)"/>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.UserRating),10.0)"/>
    </variable>

    <!-- ListItem.Rating -->
    <variable name="RatingDecimalToPercentageListItemRating">
        <value condition="String.IsEqual(ListItem.Rating,0)"/>
        <value condition="String.IsEqual(ListItem.Rating,0.0)"/>
        <value condition="String.IsEqual(ListItem.Rating,0.1)">1</value>
        <value condition="String.IsEqual(ListItem.Rating,0.2)">2</value>
        <value condition="String.IsEqual(ListItem.Rating,0.3)">3</value>
        <value condition="String.IsEqual(ListItem.Rating,0.4)">4</value>
        <value condition="String.IsEqual(ListItem.Rating,0.5)">5</value>
        <value condition="String.IsEqual(ListItem.Rating,0.6)">6</value>
        <value condition="String.IsEqual(ListItem.Rating,0.7)">7</value>
        <value condition="String.IsEqual(ListItem.Rating,0.8)">8</value>
        <value condition="String.IsEqual(ListItem.Rating,0.9)">9</value>
        <value condition="String.IsEqual(ListItem.Rating,1)">10</value>
        <value condition="String.IsEqual(ListItem.Rating,1.0)">10</value>
        <value condition="String.IsEqual(ListItem.Rating,1.1)">11</value>
        <value condition="String.IsEqual(ListItem.Rating,1.2)">12</value>
        <value condition="String.IsEqual(ListItem.Rating,1.3)">13</value>
        <value condition="String.IsEqual(ListItem.Rating,1.4)">14</value>
        <value condition="String.IsEqual(ListItem.Rating,1.5)">15</value>
        <value condition="String.IsEqual(ListItem.Rating,1.6)">16</value>
        <value condition="String.IsEqual(ListItem.Rating,1.7)">17</value>
        <value condition="String.IsEqual(ListItem.Rating,1.8)">18</value>
        <value condition="String.IsEqual(ListItem.Rating,1.9)">19</value>
        <value condition="String.IsEqual(ListItem.Rating,2)">20</value>
        <value condition="String.IsEqual(ListItem.Rating,2.0)">20</value>
        <value condition="String.IsEqual(ListItem.Rating,2.1)">21</value>
        <value condition="String.IsEqual(ListItem.Rating,2.2)">22</value>
        <value condition="String.IsEqual(ListItem.Rating,2.3)">23</value>
        <value condition="String.IsEqual(ListItem.Rating,2.4)">24</value>
        <value condition="String.IsEqual(ListItem.Rating,2.5)">25</value>
        <value condition="String.IsEqual(ListItem.Rating,2.6)">26</value>
        <value condition="String.IsEqual(ListItem.Rating,2.7)">27</value>
        <value condition="String.IsEqual(ListItem.Rating,2.8)">28</value>
        <value condition="String.IsEqual(ListItem.Rating,2.9)">29</value>
        <value condition="String.IsEqual(ListItem.Rating,3)">30</value>
        <value condition="String.IsEqual(ListItem.Rating,3.0)">30</value>
        <value condition="String.IsEqual(ListItem.Rating,3.1)">31</value>
        <value condition="String.IsEqual(ListItem.Rating,3.2)">32</value>
        <value condition="String.IsEqual(ListItem.Rating,3.3)">33</value>
        <value condition="String.IsEqual(ListItem.Rating,3.4)">34</value>
        <value condition="String.IsEqual(ListItem.Rating,3.5)">35</value>
        <value condition="String.IsEqual(ListItem.Rating,3.6)">36</value>
        <value condition="String.IsEqual(ListItem.Rating,3.7)">37</value>
        <value condition="String.IsEqual(ListItem.Rating,3.8)">38</value>
        <value condition="String.IsEqual(ListItem.Rating,3.9)">39</value>
        <value condition="String.IsEqual(ListItem.Rating,4)">40</value>
        <value condition="String.IsEqual(ListItem.Rating,4.0)">40</value>
        <value condition="String.IsEqual(ListItem.Rating,4.1)">41</value>
        <value condition="String.IsEqual(ListItem.Rating,4.2)">42</value>
        <value condition="String.IsEqual(ListItem.Rating,4.3)">43</value>
        <value condition="String.IsEqual(ListItem.Rating,4.4)">44</value>
        <value condition="String.IsEqual(ListItem.Rating,4.5)">45</value>
        <value condition="String.IsEqual(ListItem.Rating,4.6)">46</value>
        <value condition="String.IsEqual(ListItem.Rating,4.7)">47</value>
        <value condition="String.IsEqual(ListItem.Rating,4.8)">48</value>
        <value condition="String.IsEqual(ListItem.Rating,4.9)">49</value>
        <value condition="String.IsEqual(ListItem.Rating,5)">50</value>
        <value condition="String.IsEqual(ListItem.Rating,5.0)">50</value>
        <value condition="String.IsEqual(ListItem.Rating,5.1)">51</value>
        <value condition="String.IsEqual(ListItem.Rating,5.2)">52</value>
        <value condition="String.IsEqual(ListItem.Rating,5.3)">53</value>
        <value condition="String.IsEqual(ListItem.Rating,5.4)">54</value>
        <value condition="String.IsEqual(ListItem.Rating,5.5)">55</value>
        <value condition="String.IsEqual(ListItem.Rating,5.6)">56</value>
        <value condition="String.IsEqual(ListItem.Rating,5.7)">57</value>
        <value condition="String.IsEqual(ListItem.Rating,5.8)">58</value>
        <value condition="String.IsEqual(ListItem.Rating,5.9)">59</value>
        <value condition="String.IsEqual(ListItem.Rating,6)">60</value>
        <value condition="String.IsEqual(ListItem.Rating,6.0)">60</value>
        <value condition="String.IsEqual(ListItem.Rating,6.1)">61</value>
        <value condition="String.IsEqual(ListItem.Rating,6.2)">62</value>
        <value condition="String.IsEqual(ListItem.Rating,6.3)">63</value>
        <value condition="String.IsEqual(ListItem.Rating,6.4)">64</value>
        <value condition="String.IsEqual(ListItem.Rating,6.5)">65</value>
        <value condition="String.IsEqual(ListItem.Rating,6.6)">66</value>
        <value condition="String.IsEqual(ListItem.Rating,6.7)">67</value>
        <value condition="String.IsEqual(ListItem.Rating,6.8)">68</value>
        <value condition="String.IsEqual(ListItem.Rating,6.9)">69</value>
        <value condition="String.IsEqual(ListItem.Rating,7)">70</value>
        <value condition="String.IsEqual(ListItem.Rating,7.0)">70</value>
        <value condition="String.IsEqual(ListItem.Rating,7.1)">71</value>
        <value condition="String.IsEqual(ListItem.Rating,7.2)">72</value>
        <value condition="String.IsEqual(ListItem.Rating,7.3)">73</value>
        <value condition="String.IsEqual(ListItem.Rating,7.4)">74</value>
        <value condition="String.IsEqual(ListItem.Rating,7.5)">75</value>
        <value condition="String.IsEqual(ListItem.Rating,7.6)">76</value>
        <value condition="String.IsEqual(ListItem.Rating,7.7)">77</value>
        <value condition="String.IsEqual(ListItem.Rating,7.8)">78</value>
        <value condition="String.IsEqual(ListItem.Rating,7.9)">79</value>
        <value condition="String.IsEqual(ListItem.Rating,8)">80</value>
        <value condition="String.IsEqual(ListItem.Rating,8.0)">80</value>
        <value condition="String.IsEqual(ListItem.Rating,8.1)">81</value>
        <value condition="String.IsEqual(ListItem.Rating,8.2)">82</value>
        <value condition="String.IsEqual(ListItem.Rating,8.3)">83</value>
        <value condition="String.IsEqual(ListItem.Rating,8.4)">84</value>
        <value condition="String.IsEqual(ListItem.Rating,8.5)">85</value>
        <value condition="String.IsEqual(ListItem.Rating,8.6)">86</value>
        <value condition="String.IsEqual(ListItem.Rating,8.7)">87</value>
        <value condition="String.IsEqual(ListItem.Rating,8.8)">88</value>
        <value condition="String.IsEqual(ListItem.Rating,8.9)">89</value>
        <value condition="String.IsEqual(ListItem.Rating,9)">90</value>
        <value condition="String.IsEqual(ListItem.Rating,9.0)">90</value>
        <value condition="String.IsEqual(ListItem.Rating,9.1)">91</value>
        <value condition="String.IsEqual(ListItem.Rating,9.2)">92</value>
        <value condition="String.IsEqual(ListItem.Rating,9.3)">93</value>
        <value condition="String.IsEqual(ListItem.Rating,9.4)">94</value>
        <value condition="String.IsEqual(ListItem.Rating,9.5)">95</value>
        <value condition="String.IsEqual(ListItem.Rating,9.6)">96</value>
        <value condition="String.IsEqual(ListItem.Rating,9.7)">97</value>
        <value condition="String.IsEqual(ListItem.Rating,9.8)">98</value>
        <value condition="String.IsEqual(ListItem.Rating,9.9)">99</value>
        <value condition="String.IsEqual(ListItem.Rating,10)"/>
        <value condition="String.IsEqual(ListItem.Rating,10.0)"/>
    </variable>

    <!-- Window(Home).Property(ListItem.Rating) -->
    <variable name="RatingDecimalToPercentageHomeListItemRating">
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0)"/>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.0)"/>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.1)">1</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.2)">2</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.3)">3</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.4)">4</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.5)">5</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.6)">6</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.7)">7</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.8)">8</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),0.9)">9</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1)">10</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.0)">10</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.1)">11</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.2)">12</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.3)">13</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.4)">14</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.5)">15</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.6)">16</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.7)">17</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.8)">18</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),1.9)">19</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2)">20</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.0)">20</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.1)">21</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.2)">22</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.3)">23</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.4)">24</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.5)">25</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.6)">26</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.7)">27</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.8)">28</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),2.9)">29</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3)">30</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.0)">30</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.1)">31</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.2)">32</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.3)">33</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.4)">34</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.5)">35</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.6)">36</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.7)">37</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.8)">38</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),3.9)">39</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4)">40</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.0)">40</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.1)">41</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.2)">42</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.3)">43</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.4)">44</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.5)">45</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.6)">46</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.7)">47</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.8)">48</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),4.9)">49</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5)">50</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.0)">50</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.1)">51</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.2)">52</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.3)">53</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.4)">54</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.5)">55</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.6)">56</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.7)">57</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.8)">58</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),5.9)">59</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6)">60</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.0)">60</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.1)">61</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.2)">62</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.3)">63</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.4)">64</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.5)">65</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.6)">66</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.7)">67</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.8)">68</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),6.9)">69</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7)">70</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.0)">70</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.1)">71</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.2)">72</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.3)">73</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.4)">74</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.5)">75</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.6)">76</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.7)">77</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.8)">78</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),7.9)">79</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8)">80</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.0)">80</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.1)">81</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.2)">82</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.3)">83</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.4)">84</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.5)">85</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.6)">86</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.7)">87</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.8)">88</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),8.9)">89</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9)">90</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.0)">90</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.1)">91</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.2)">92</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.3)">93</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.4)">94</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.5)">95</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.6)">96</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.7)">97</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.8)">98</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),9.9)">99</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),10)"/>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.Rating),10.0)"/>
    </variable>
    <!-- END OF DecimalToPercentage -->

    <variable name="PercentRemained">
        <value condition="!String.IsEmpty(ListItem.PercentPlayed)">$VAR[ListItemPercentRemained]</value>
        <value  condition="$EXP[IsMainMenuOpened] + !String.IsEmpty(Window(Home).Property(ListItem.PercentPlayed))">$VAR[WindowPropertyPercentRemained]</value>
    </variable>

    <!-- percent played to remaining conversion -->
    <variable name="ListItemPercentRemained">
        <value condition="String.IsEqual(ListItem.PercentPlayed,0)">100</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,1)">99</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,2)">98</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,3)">97</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,4)">96</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,5)">95</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,6)">94</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,7)">93</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,8)">92</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,9)">91</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,10)">90</value>

        <value condition="String.IsEqual(ListItem.PercentPlayed,11)">89</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,12)">88</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,13)">87</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,14)">86</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,15)">85</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,16)">84</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,17)">83</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,18)">82</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,19)">81</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,20)">80</value>

        <value condition="String.IsEqual(ListItem.PercentPlayed,21)">79</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,22)">78</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,23)">77</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,24)">76</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,25)">75</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,26)">74</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,27)">73</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,28)">72</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,29)">71</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,30)">70</value>

        <value condition="String.IsEqual(ListItem.PercentPlayed,31)">69</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,32)">68</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,33)">67</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,34)">66</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,35)">65</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,36)">64</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,37)">63</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,38)">62</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,39)">61</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,40)">60</value>

        <value condition="String.IsEqual(ListItem.PercentPlayed,41)">59</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,42)">58</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,43)">57</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,44)">56</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,45)">55</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,46)">54</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,47)">53</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,48)">52</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,49)">51</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,50)">50</value>

        <value condition="String.IsEqual(ListItem.PercentPlayed,51)">49</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,52)">48</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,53)">47</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,54)">46</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,55)">45</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,56)">44</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,57)">43</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,58)">42</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,59)">41</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,60)">40</value>

        <value condition="String.IsEqual(ListItem.PercentPlayed,61)">39</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,62)">38</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,63)">37</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,64)">36</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,65)">35</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,66)">34</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,67)">33</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,68)">32</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,69)">31</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,70)">30</value>

        <value condition="String.IsEqual(ListItem.PercentPlayed,71)">29</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,72)">28</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,73)">27</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,74)">26</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,75)">25</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,76)">24</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,77)">23</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,78)">22</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,79)">21</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,80)">20</value>

        <value condition="String.IsEqual(ListItem.PercentPlayed,81)">19</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,82)">18</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,83)">17</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,84)">16</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,85)">15</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,86)">14</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,87)">13</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,88)">12</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,89)">11</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,90)">10</value>

        <value condition="String.IsEqual(ListItem.PercentPlayed,91)">9</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,92)">8</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,93)">7</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,94)">6</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,95)">5</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,96)">4</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,97)">3</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,98)">2</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,99)">1</value>
        <value condition="String.IsEqual(ListItem.PercentPlayed,100)">0</value>
    </variable>

    <variable name="WindowPropertyPercentRemained">
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),0)">100</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),1)">99</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),2)">98</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),3)">97</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),4)">96</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),5)">95</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),6)">94</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),7)">93</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),8)">92</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),9)">91</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),10)">90</value>

        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),11)">89</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),12)">88</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),13)">87</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),14)">86</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),15)">85</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),16)">84</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),17)">83</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),18)">82</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),19)">81</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),20)">80</value>

        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),21)">79</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),22)">78</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),23)">77</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),24)">76</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),25)">75</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),26)">74</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),27)">73</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),28)">72</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),29)">71</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),30)">70</value>

        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),31)">69</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),32)">68</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),33)">67</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),34)">66</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),35)">65</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),36)">64</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),37)">63</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),38)">62</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),39)">61</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),40)">60</value>

        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),41)">59</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),42)">58</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),43)">57</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),44)">56</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),45)">55</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),46)">54</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),47)">53</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),48)">52</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),49)">51</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),50)">50</value>

        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),51)">49</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),52)">48</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),53)">47</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),54)">46</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),55)">45</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),56)">44</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),57)">43</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),58)">42</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),59)">41</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),60)">40</value>

        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),61)">39</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),62)">38</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),63)">37</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),64)">36</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),65)">35</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),66)">34</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),67)">33</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),68)">32</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),69)">31</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),70)">30</value>

        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),71)">29</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),72)">28</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),73)">27</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),74)">26</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),75)">25</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),76)">24</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),77)">23</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),78)">22</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),79)">21</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),80)">20</value>

        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),81)">19</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),82)">18</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),83)">17</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),84)">16</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),85)">15</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),86)">14</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),87)">13</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),88)">12</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),89)">11</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),90)">10</value>

        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),91)">9</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),92)">8</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),93)">7</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),94)">6</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),95)">5</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),96)">4</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),97)">3</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),98)">2</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),99)">1</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.PercentPlayed),100)">0</value>
    </variable>
</includes>

